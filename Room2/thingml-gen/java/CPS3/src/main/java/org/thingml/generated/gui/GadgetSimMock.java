/**
 * File generated by the ThingML IDE
 * /!\\Do not edit this file/!\\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 */

package org.thingml.generated.gui;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;
import org.thingml.java.*;
import org.thingml.java.ext.*;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.text.SimpleDateFormat;

import java.util.*;
public class GadgetSimMock extends Component implements ActionListener, ItemListener, IGadgetSim_show_gadgets{

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String instanceName;public void printDebug(String trace) {
if(this.isDebug()) {
System.out.println(this.instanceName + trace);
}
}

//Message types
private final SensorinfoMessageType sensorinfoType = new SensorinfoMessageType();
private final DeviceinfoMessageType deviceinfoType = new DeviceinfoMessageType();
private final Set_polling_intervalMessageType set_polling_intervalType = new Set_polling_intervalMessageType();
private final PromptMessageType promptType = new PromptMessageType();
final Port port_GadgetSim_show_gadgets;
public Port getShow_gadgets_port(){return port_GadgetSim_show_gadgets;}
private SimpleDateFormat dateFormat=new SimpleDateFormat("dd MMM yyy 'at' HH:mm:ss.SSS");

private JTabbedPane tabbedPane=new JTabbedPane();
private JFrame frame;

        public void disableAll() {
}

public void enableAll() {
}



private JTextPane screen;
private JButton clearButton;
private JButton cliButton;
private StyledDocument doc;
private final Color alertColor=new Color(255,64,32);
private boolean colorOutput=false;
private JCheckBox showColor;
private JTextField cli;
private JList<Command>commands;

private synchronized boolean isColorOutput(){
        return colorOutput;
        }

private synchronized void setColorOutput(boolean value){
        this.colorOutput=value;
        }

public GadgetSimMock(String name){
        super(name);
        port_GadgetSim_show_gadgets = new Port(PortType.PROVIDED, "show_gadgets", this);

        initGUI(name);
        }

@Override
public void stop(){
        super.stop();
        frame.setVisible(false);
        }

@Override
public void start(){
        super.start();
        frame.setVisible(true);
        }

@Override
public Component buildBehavior(String session,Component root){
        behavior=new CompositeState("GadgetSim",Collections.EMPTY_LIST,new AtomicState("dummy"),Collections.EMPTY_LIST){
@Override
public boolean dispatch(final Event event, final Port p){
        if(event.getPort()!=null){
        print(event.getType().getName() + "_via_" + p.getName(),dateFormat.format(new Date())+": " + p.getName() + "?"+event.toString());
        }
        return false;
        }
        };
        return this;
        }

        

public void print(String id,String data){
        try{
        if(isColorOutput())
        doc.insertString(doc.getLength(),formatForPrint(data),doc.getStyle(id));
        else
        doc.insertString(doc.getLength(),formatForPrint(data),null);
        screen.setCaretPosition(doc.getLength());
        }catch(BadLocationException ex){
        ex.printStackTrace();
        }
        }

        public void addListener(ActionListener l){
}



private void initGUI(String name){

        GridBagConstraints c=new GridBagConstraints();
        c.gridwidth=1;
        c.fill=GridBagConstraints.HORIZONTAL;
        c.insets=new Insets(0,3,0,3);
        c.weightx=0.5;
        c.weighty=0;


        c.gridy=0;
        c.gridx=0;
        frame=new JFrame(name);
        frame.setLayout(new GridBagLayout());
        frame.add(tabbedPane,c);

        

        c.gridy=1;
        c.gridx=0;
        c.gridwidth=1;
        c.fill=GridBagConstraints.BOTH;

        c.weighty=0;
        JPanel cliPanel=new JPanel();
        cliPanel.setLayout(new FlowLayout());
        JLabel cliLabel=new JLabel("Command line: ");
        cli=new JTextField("port!message(param1, param2, param3)");
        cliButton=new JButton("Send");
        cliPanel.add(cliLabel);
        cliPanel.add(cli);
        cliPanel.add(cliButton);
        frame.add(cliPanel,c);
        cliButton.addActionListener(this);

        c.gridx=0;
        c.gridy=2;
        c.weighty=1;
        frame.add(createJTextPane(),c);


        c.gridy=2;
        c.weighty=0;
        clearButton=new JButton("Clear Console");
        frame.add(clearButton,c);

        c.gridy=3;
        c.gridx=0;
        showColor=new JCheckBox("Colored logs");
        showColor.addItemListener(this);
        frame.add(showColor,c);

        commands=new JList<Command>();
        commands.setModel(new DefaultListModel<Command>());
        commands.setVisible(true);
        commands.setLayout(new GridBagLayout());
        c.gridx=1;
        c.gridy=0;
        c.weighty=1;
        c.gridheight=4;
        c.fill=GridBagConstraints.BOTH;
        frame.add(new JScrollPane(commands),c);


        frame.setMinimumSize(new Dimension(480,480));
        frame.pack();
        clearButton.addActionListener(this);
        addListener(this);
        frame.setVisible(true);
        }

public static JLabel createLabel(String name){
        return new JLabel(name);
        }

public static JButton createSendButton(String name){
        return new JButton("send");
        }

public JScrollPane createJTextPane(){
        screen=new JTextPane();
        screen.setFocusable(false);
        screen.setEditable(false);
        screen.setAutoscrolls(true);

        JScrollPane editorScrollPane=new JScrollPane(screen);
        editorScrollPane.setVerticalScrollBarPolicy(
        JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        //editorScrollPane.setPreferredSize(new Dimension(480,240));
        //editorScrollPane.setMinimumSize(new Dimension(320,160));

        doc=screen.getStyledDocument();
        //Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);\n"

        Style receivesensorinfo_via_show_gadgetsStyle = doc.addStyle("sensorinfo_via_show_gadgets", null);
StyleConstants.setBackground(receivesensorinfo_via_show_gadgetsStyle, new Color(147, 143, 220));
Style receivedeviceinfo_via_show_gadgetsStyle = doc.addStyle("deviceinfo_via_show_gadgets", null);
StyleConstants.setBackground(receivedeviceinfo_via_show_gadgetsStyle, new Color(153, 143, 169));


        return editorScrollPane;
        }

private String formatForPrint(String text){
        return(text.endsWith("\n")?text:text+"\n");
        }

private void parseAndExecute(String command){
        String[]params=command.split("!");
        if(params.length!=2){
        cliButton.setForeground(alertColor);
        cli.setText("port!message(param1, param2, param3)");
        return;
        }

        

        else{
        cliButton.setForeground(alertColor);
        cli.setText("port!message(param1, param2, param3)");
        }
        }

@Override
public void actionPerformed(ActionEvent ae){
        if(ae.getSource()==cliButton){
        parseAndExecute(cli.getText());
        }
        else if(ae.getSource()==clearButton){
        screen.setText("");
        }
        
        }

@Override
public void itemStateChanged(ItemEvent e){
        Object source=e.getItemSelectable();
        if(source==showColor){
        setColorOutput(!isColorOutput());
        }
        }
@Override
public synchronized void sensorinfo_via_show_gadgets(String GeneralMsg_sensorinfo_model_var, String GeneralMsg_sensorinfo_proto_var, short GeneralMsg_sensorinfo_sid_var, short GeneralMsg_sensorinfo_dataTypes_var, float GeneralMsg_sensorinfo_temperature_var, int GeneralMsg_sensorinfo_humidity_var, int GeneralMsg_sensorinfo_timeStamp_var){
print("sensorinfo_via_show_gadgets", "TODO");
}
@Override
public synchronized void deviceinfo_via_show_gadgets(short GeneralMsg_deviceinfo_did_var, String GeneralMsg_deviceinfo_name_var, String GeneralMsg_deviceinfo_model_var, String GeneralMsg_deviceinfo_proto_var, String GeneralMsg_deviceinfo_ttype_var, short GeneralMsg_deviceinfo_meth_var, String GeneralMsg_deviceinfo_lastCmd_var, int GeneralMsg_deviceinfo_lastValue_var){
print("deviceinfo_via_show_gadgets", "TODO");
}
}
