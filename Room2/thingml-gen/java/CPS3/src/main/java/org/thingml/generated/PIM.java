/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : PIM
 **/
public class PIM extends Component implements IPIM_get_sensor, IPIM_human_input, IPIM_guard_temperature, IPIM_guard_human {

private List<AttributeListener> attListener = new ArrayList<AttributeListener>();
public void addAttributeListener(AttributeListener listener){
this.attListener.add(listener);
}

public void removeAttributeListener(AttributeListener listener){
this.attListener.remove(listener);
}

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
@Override
public String toString() {
String result = "instance " + getName() + "\n";
result += "\ttmrature = " + PIM_tmrature_var;
result += "\ttemperature_range = " + PIM_temperature_range_var;
result += "\tthermo_id1 = " + PIM_thermo_id1_var;
result += "\tthermo_id2 = " + PIM_thermo_id2_var;
result += "\tnoOffTerFound = " + PIM_noOffTerFound_var;
result += "\tswitch_id = " + PIM_switch_id_var;
result += "\tlasttemp = " + PIM_lasttemp_var;
result += "";
return result;
}

private Collection<IPIM_request_sensorClient> request_sensor_clients = Collections.synchronizedCollection(new LinkedList<IPIM_request_sensorClient>());
public synchronized void registerOnRequest_sensor(IPIM_request_sensorClient client){
request_sensor_clients.add(client);
}

public synchronized void unregisterFromRequest_sensor(IPIM_request_sensorClient client){
request_sensor_clients.remove(client);
}

private Collection<IPIM_request_actuatorClient> request_actuator_clients = Collections.synchronizedCollection(new LinkedList<IPIM_request_actuatorClient>());
public synchronized void registerOnRequest_actuator(IPIM_request_actuatorClient client){
request_actuator_clients.add(client);
}

public synchronized void unregisterFromRequest_actuator(IPIM_request_actuatorClient client){
request_actuator_clients.remove(client);
}

private Collection<IPIM_human_outputClient> human_output_clients = Collections.synchronizedCollection(new LinkedList<IPIM_human_outputClient>());
public synchronized void registerOnHuman_output(IPIM_human_outputClient client){
human_output_clients.add(client);
}

public synchronized void unregisterFromHuman_output(IPIM_human_outputClient client){
human_output_clients.remove(client);
}

private Collection<IPIM_guard_temperatureClient> guard_temperature_clients = Collections.synchronizedCollection(new LinkedList<IPIM_guard_temperatureClient>());
public synchronized void registerOnGuard_temperature(IPIM_guard_temperatureClient client){
guard_temperature_clients.add(client);
}

public synchronized void unregisterFromGuard_temperature(IPIM_guard_temperatureClient client){
guard_temperature_clients.remove(client);
}

private Collection<IPIM_guard_humanClient> guard_human_clients = Collections.synchronizedCollection(new LinkedList<IPIM_guard_humanClient>());
public synchronized void registerOnGuard_human(IPIM_guard_humanClient client){
guard_human_clients.add(client);
}

public synchronized void unregisterFromGuard_human(IPIM_guard_humanClient client){
guard_human_clients.remove(client);
}

@Override
public synchronized void temperature_via_get_sensor(short TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, float TemperatureMsg_temperature_t_var){
receive(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var), get_sensor_port);
}

@Override
public synchronized void add_thermometer_via_human_input(short TemperatureMsg_add_thermometer_id_var, String TemperatureMsg_add_thermometer_txt_var){
receive(add_thermometerType.instantiate(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var), human_input_port);
}

@Override
public synchronized void add_device_via_human_input(short DeviceGeneral_add_device_did_var){
receive(add_deviceType.instantiate(DeviceGeneral_add_device_did_var), human_input_port);
}

@Override
public synchronized void SwitchOn_via_human_input(short OnOffMsg_SwitchOn_did_var){
receive(SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var), human_input_port);
}

@Override
public synchronized void SwitchOff_via_human_input(short OnOffMsg_SwitchOff_did_var){
receive(SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var), human_input_port);
}

@Override
public synchronized void set_temperature_via_human_input(float TemperatureMsg_set_temperature_t_var){
receive(set_temperatureType.instantiate(TemperatureMsg_set_temperature_t_var), human_input_port);
}

@Override
public synchronized void set_polling_interval_via_human_input(short GeneralMsg_set_polling_interval_intrvl_var){
receive(set_polling_intervalType.instantiate(GeneralMsg_set_polling_interval_intrvl_var), human_input_port);
}

@Override
public synchronized void set_temperature_range_via_human_input(float TemperatureMsg_set_temperature_range_range_var){
receive(set_temperature_rangeType.instantiate(TemperatureMsg_set_temperature_range_range_var), human_input_port);
}

@Override
public synchronized void timer_timeout_via_guard_temperature(){
receive(timer_timeoutType.instantiate(), guard_temperature_port);
}

@Override
public synchronized void timer_timeout_via_guard_human(){
receive(timer_timeoutType.instantiate(), guard_human_port);
}

private void sendAdd_thermometer_via_request_sensor(short TemperatureMsg_add_thermometer_id_var, String TemperatureMsg_add_thermometer_txt_var){
//ThingML send
request_sensor_port.send(add_thermometerType.instantiate(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var));
//send to other clients
for(IPIM_request_sensorClient client : request_sensor_clients){
client.add_thermometer_from_request_sensor(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var);
}}

private void sendSet_polling_interval_via_request_sensor(short GeneralMsg_set_polling_interval_intrvl_var){
//ThingML send
request_sensor_port.send(set_polling_intervalType.instantiate(GeneralMsg_set_polling_interval_intrvl_var));
//send to other clients
for(IPIM_request_sensorClient client : request_sensor_clients){
client.set_polling_interval_from_request_sensor(GeneralMsg_set_polling_interval_intrvl_var);
}}

private void sendAdd_device_via_request_actuator(short DeviceGeneral_add_device_did_var){
//ThingML send
request_actuator_port.send(add_deviceType.instantiate(DeviceGeneral_add_device_did_var));
//send to other clients
for(IPIM_request_actuatorClient client : request_actuator_clients){
client.add_device_from_request_actuator(DeviceGeneral_add_device_did_var);
}}

private void sendSwitchOn_via_request_actuator(short OnOffMsg_SwitchOn_did_var){
//ThingML send
request_actuator_port.send(SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var));
//send to other clients
for(IPIM_request_actuatorClient client : request_actuator_clients){
client.SwitchOn_from_request_actuator(OnOffMsg_SwitchOn_did_var);
}}

private void sendSwitchOff_via_request_actuator(short OnOffMsg_SwitchOff_did_var){
//ThingML send
request_actuator_port.send(SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var));
//send to other clients
for(IPIM_request_actuatorClient client : request_actuator_clients){
client.SwitchOff_from_request_actuator(OnOffMsg_SwitchOff_did_var);
}}

private void sendTemperature_via_human_output(short TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, float TemperatureMsg_temperature_t_var){
//ThingML send
human_output_port.send(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var));
//send to other clients
for(IPIM_human_outputClient client : human_output_clients){
client.temperature_from_human_output(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var);
}}

private void sendPrompt_via_human_output(String GeneralMsg_prompt_txt_var){
//ThingML send
human_output_port.send(promptType.instantiate(GeneralMsg_prompt_txt_var));
//send to other clients
for(IPIM_human_outputClient client : human_output_clients){
client.prompt_from_human_output(GeneralMsg_prompt_txt_var);
}}

private void sendTimer_start_via_guard_temperature(short TimerMsgs_timer_start_delay_var){
//ThingML send
guard_temperature_port.send(timer_startType.instantiate(TimerMsgs_timer_start_delay_var));
//send to other clients
for(IPIM_guard_temperatureClient client : guard_temperature_clients){
client.timer_start_from_guard_temperature(TimerMsgs_timer_start_delay_var);
}}

private void sendTimer_cancel_via_guard_temperature(){
//ThingML send
guard_temperature_port.send(timer_cancelType.instantiate());
//send to other clients
for(IPIM_guard_temperatureClient client : guard_temperature_clients){
client.timer_cancel_from_guard_temperature();
}}

private void sendTimer_start_via_guard_human(short TimerMsgs_timer_start_delay_var){
//ThingML send
guard_human_port.send(timer_startType.instantiate(TimerMsgs_timer_start_delay_var));
//send to other clients
for(IPIM_guard_humanClient client : guard_human_clients){
client.timer_start_from_guard_human(TimerMsgs_timer_start_delay_var);
}}

private void sendTimer_cancel_via_guard_human(){
//ThingML send
guard_human_port.send(timer_cancelType.instantiate());
//send to other clients
for(IPIM_guard_humanClient client : guard_human_clients){
client.timer_cancel_from_guard_human();
}}

//Attributes
private float PIM_tmrature_var;
private float PIM_temperature_range_var;
private short PIM_thermo_id1_var;
private short PIM_thermo_id2_var;
private short PIM_noOffTerFound_var;
private short PIM_switch_id_var;
private float PIM_lasttemp_var;
private float debug_PIM_tmrature_var;
private float debug_PIM_temperature_range_var;
private short debug_PIM_thermo_id1_var;
private short debug_PIM_thermo_id2_var;
private short debug_PIM_noOffTerFound_var;
private short debug_PIM_switch_id_var;
private float debug_PIM_lasttemp_var;
//Ports
private Port get_sensor_port;
private Port request_sensor_port;
private Port request_actuator_port;
private Port human_input_port;
private Port human_output_port;
private Port guard_temperature_port;
private Port guard_human_port;
//Message types
protected final SensorinfoMessageType sensorinfoType = new SensorinfoMessageType();
public SensorinfoMessageType getSensorinfoType(){
return sensorinfoType;
}

protected final DeviceinfoMessageType deviceinfoType = new DeviceinfoMessageType();
public DeviceinfoMessageType getDeviceinfoType(){
return deviceinfoType;
}

protected final Set_polling_intervalMessageType set_polling_intervalType = new Set_polling_intervalMessageType();
public Set_polling_intervalMessageType getSet_polling_intervalType(){
return set_polling_intervalType;
}

protected final PromptMessageType promptType = new PromptMessageType();
public PromptMessageType getPromptType(){
return promptType;
}

protected final TemperatureMessageType temperatureType = new TemperatureMessageType();
public TemperatureMessageType getTemperatureType(){
return temperatureType;
}

protected final Temperature2MessageType temperature2Type = new Temperature2MessageType();
public Temperature2MessageType getTemperature2Type(){
return temperature2Type;
}

protected final Add_thermometerMessageType add_thermometerType = new Add_thermometerMessageType();
public Add_thermometerMessageType getAdd_thermometerType(){
return add_thermometerType;
}

protected final Set_temperatureMessageType set_temperatureType = new Set_temperatureMessageType();
public Set_temperatureMessageType getSet_temperatureType(){
return set_temperatureType;
}

protected final Set_temperature_rangeMessageType set_temperature_rangeType = new Set_temperature_rangeMessageType();
public Set_temperature_rangeMessageType getSet_temperature_rangeType(){
return set_temperature_rangeType;
}

protected final SwitchOnMessageType SwitchOnType = new SwitchOnMessageType();
public SwitchOnMessageType getSwitchOnType(){
return SwitchOnType;
}

protected final SwitchOffMessageType SwitchOffType = new SwitchOffMessageType();
public SwitchOffMessageType getSwitchOffType(){
return SwitchOffType;
}

protected final Add_deviceMessageType add_deviceType = new Add_deviceMessageType();
public Add_deviceMessageType getAdd_deviceType(){
return add_deviceType;
}

protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
public Timer_startMessageType getTimer_startType(){
return timer_startType;
}

protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
public Timer_cancelMessageType getTimer_cancelType(){
return timer_cancelType;
}

protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
public Timer_timeoutMessageType getTimer_timeoutType(){
return timer_timeoutType;
}

//CEP Streams
//Empty Constructor
public PIM() {
super();
PIM_tmrature_var = (float) 20;
PIM_noOffTerFound_var = (short) 1;
PIM_lasttemp_var = (float) 0;
}

//Constructor (all attributes)
public PIM(String name, final float PIM_tmrature_var, final float PIM_temperature_range_var, final short PIM_thermo_id1_var, final short PIM_thermo_id2_var, final short PIM_noOffTerFound_var, final short PIM_switch_id_var, final float PIM_lasttemp_var) {
super(name);
this.PIM_tmrature_var = PIM_tmrature_var;
this.PIM_temperature_range_var = PIM_temperature_range_var;
this.PIM_thermo_id1_var = PIM_thermo_id1_var;
this.PIM_thermo_id2_var = PIM_thermo_id2_var;
this.PIM_noOffTerFound_var = PIM_noOffTerFound_var;
this.PIM_switch_id_var = PIM_switch_id_var;
this.PIM_lasttemp_var = PIM_lasttemp_var;
}

//Getters and Setters for non readonly/final attributes
public float getPIM_tmrature_var() {
return PIM_tmrature_var;
}

public void setPIM_tmrature_var(float PIM_tmrature_var) {
this.PIM_tmrature_var = PIM_tmrature_var;
}

public float getPIM_temperature_range_var() {
return PIM_temperature_range_var;
}

public void setPIM_temperature_range_var(float PIM_temperature_range_var) {
this.PIM_temperature_range_var = PIM_temperature_range_var;
}

public short getPIM_thermo_id1_var() {
return PIM_thermo_id1_var;
}

public void setPIM_thermo_id1_var(short PIM_thermo_id1_var) {
this.PIM_thermo_id1_var = PIM_thermo_id1_var;
}

public short getPIM_thermo_id2_var() {
return PIM_thermo_id2_var;
}

public void setPIM_thermo_id2_var(short PIM_thermo_id2_var) {
this.PIM_thermo_id2_var = PIM_thermo_id2_var;
}

public short getPIM_noOffTerFound_var() {
return PIM_noOffTerFound_var;
}

public void setPIM_noOffTerFound_var(short PIM_noOffTerFound_var) {
this.PIM_noOffTerFound_var = PIM_noOffTerFound_var;
}

public short getPIM_switch_id_var() {
return PIM_switch_id_var;
}

public void setPIM_switch_id_var(short PIM_switch_id_var) {
this.PIM_switch_id_var = PIM_switch_id_var;
}

public float getPIM_lasttemp_var() {
return PIM_lasttemp_var;
}

public void setPIM_lasttemp_var(float PIM_lasttemp_var) {
this.PIM_lasttemp_var = PIM_lasttemp_var;
}

//Getters for Ports
public Port getGet_sensor_port() {
return get_sensor_port;
}
public Port getRequest_sensor_port() {
return request_sensor_port;
}
public Port getRequest_actuator_port() {
return request_actuator_port;
}
public Port getHuman_input_port() {
return human_input_port;
}
public Port getHuman_output_port() {
return human_output_port;
}
public Port getGuard_temperature_port() {
return guard_temperature_port;
}
public Port getGuard_human_port() {
return guard_human_port;
}
private CompositeState buildPIM_PIM_behavior(){
final List<AtomicState> states_PIM_PIM_behavior = new ArrayList<AtomicState>();
final CompositeState state_PIM_PIM_behavior_Build = buildPIM_PIM_behavior_Build();
states_PIM_PIM_behavior.add(state_PIM_PIM_behavior_Build);
final CompositeState state_PIM_PIM_behavior_Running = buildPIM_PIM_behavior_Running();
states_PIM_PIM_behavior.add(state_PIM_PIM_behavior_Running);
final List<Region> regions_PIM_PIM_behavior = new ArrayList<Region>();
final List<Handler> transitions_PIM_PIM_behavior = new ArrayList<Handler>();
transitions_PIM_PIM_behavior.add(new Transition("1847668910",set_temperatureType, human_input_port, state_PIM_PIM_behavior_Build, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (float) (set_temperature.t);
sendPrompt_via_human_output((String) ("Now entering thermostat. Please give temperature observations"));
}

});
transitions_PIM_PIM_behavior.add(new Transition("218395546",temperatureType, get_sensor_port, state_PIM_PIM_behavior_Build, state_PIM_PIM_behavior_Build){
@Override
public void doExecute(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
}

});
transitions_PIM_PIM_behavior.add(new Transition("1225327580",timer_timeoutType, guard_human_port, state_PIM_PIM_behavior_Build, state_PIM_PIM_behavior_Build){
@Override
public void doExecute(final Event e) {
sendPrompt_via_human_output((String) ("Please continue doing the build of the temperature control"));
}

});
transitions_PIM_PIM_behavior.add(new Transition("1131435989",set_polling_intervalType, human_input_port, state_PIM_PIM_behavior_Running, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
final Set_polling_intervalMessageType.Set_polling_intervalMessage set_polling_interval = (Set_polling_intervalMessageType.Set_polling_intervalMessage) e;
sendSet_polling_interval_via_request_sensor((short) (set_polling_interval.intrvl));
}

});
transitions_PIM_PIM_behavior.add(new Transition("418416309",add_thermometerType, human_input_port, state_PIM_PIM_behavior_Running, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
final Add_thermometerMessageType.Add_thermometerMessage add_thermometer = (Add_thermometerMessageType.Add_thermometerMessage) e;
sendPrompt_via_human_output((String) ("Adding gadgets has been done and then blocked"));
}

});
transitions_PIM_PIM_behavior.add(new Transition("418416309",add_deviceType, human_input_port, state_PIM_PIM_behavior_Running, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
final Add_deviceMessageType.Add_deviceMessage add_device = (Add_deviceMessageType.Add_deviceMessage) e;
sendPrompt_via_human_output((String) ("Adding gadgets has been done and then blocked"));
}

});
transitions_PIM_PIM_behavior.add(new Transition("687298721",SwitchOnType, human_input_port, state_PIM_PIM_behavior_Running, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: Impossible messages at PIM.Running"));
}

});
transitions_PIM_PIM_behavior.add(new Transition("687298721",SwitchOffType, human_input_port, state_PIM_PIM_behavior_Running, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: Impossible messages at PIM.Running"));
}

});
transitions_PIM_PIM_behavior.add(new Transition("687298721",set_temperatureType, human_input_port, state_PIM_PIM_behavior_Running, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: Impossible messages at PIM.Running"));
}

});
transitions_PIM_PIM_behavior.add(new Transition("921184871",temperatureType, get_sensor_port, state_PIM_PIM_behavior_Running, state_PIM_PIM_behavior_Running){
@Override
public void doExecute(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
sendPrompt_via_human_output((String) ("INTERNAL ERROR: temperature received at PIM.Running"));
PIM_lasttemp_var = (float) (temperature.t);
}

});
final CompositeState state_PIM_PIM_behavior = new CompositeState("PIM_behavior", states_PIM_PIM_behavior, state_PIM_PIM_behavior_Build, transitions_PIM_PIM_behavior, regions_PIM_PIM_behavior, false);
return state_PIM_PIM_behavior;
}

private CompositeState buildPIM_PIM_behavior_Build(){
final List<AtomicState> states_PIM_PIM_behavior_Build = new ArrayList<AtomicState>();
final AtomicState state_PIM_PIM_behavior_Build_AddThermo = new AtomicState("AddThermo")
;
states_PIM_PIM_behavior_Build.add(state_PIM_PIM_behavior_Build_AddThermo);
final AtomicState state_PIM_PIM_behavior_Build_AddDevice = new AtomicState("AddDevice")
;
states_PIM_PIM_behavior_Build.add(state_PIM_PIM_behavior_Build_AddDevice);
final AtomicState state_PIM_PIM_behavior_Build_SetRange = new AtomicState("SetRange")
;
states_PIM_PIM_behavior_Build.add(state_PIM_PIM_behavior_Build_SetRange);
final AtomicState state_PIM_PIM_behavior_Build_SetThermostat = new AtomicState("SetThermostat")
;
states_PIM_PIM_behavior_Build.add(state_PIM_PIM_behavior_Build_SetThermostat);
final List<Region> regions_PIM_PIM_behavior_Build = new ArrayList<Region>();
final List<Handler> transitions_PIM_PIM_behavior_Build = new ArrayList<Handler>();
transitions_PIM_PIM_behavior_Build.add(new Transition("1432730327",add_thermometerType, human_input_port, state_PIM_PIM_behavior_Build_AddThermo, state_PIM_PIM_behavior_Build_AddThermo){
@Override
public boolean doCheck(final Event e) {
final Add_thermometerMessageType.Add_thermometerMessage add_thermometer = (Add_thermometerMessageType.Add_thermometerMessage) e;
return getPIM_noOffTerFound_var() == 1;
}

@Override
public void doExecute(final Event e) {
final Add_thermometerMessageType.Add_thermometerMessage add_thermometer = (Add_thermometerMessageType.Add_thermometerMessage) e;
PIM_thermo_id1_var = (short) (add_thermometer.id);
sendAdd_thermometer_via_request_sensor((short) (getPIM_thermo_id1_var()), (String) (add_thermometer.txt));
setPIM_noOffTerFound_var((short)(getPIM_noOffTerFound_var() + 1));
sendPrompt_via_human_output((String) ("first themometer v2"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("990029917",add_thermometerType, human_input_port, state_PIM_PIM_behavior_Build_AddThermo, state_PIM_PIM_behavior_Build_AddDevice){
@Override
public boolean doCheck(final Event e) {
final Add_thermometerMessageType.Add_thermometerMessage add_thermometer = (Add_thermometerMessageType.Add_thermometerMessage) e;
return getPIM_noOffTerFound_var() == 2;
}

@Override
public void doExecute(final Event e) {
final Add_thermometerMessageType.Add_thermometerMessage add_thermometer = (Add_thermometerMessageType.Add_thermometerMessage) e;
PIM_thermo_id2_var = (short) (add_thermometer.id);
sendAdd_thermometer_via_request_sensor((short) (getPIM_thermo_id2_var()), (String) (add_thermometer.txt));
setPIM_noOffTerFound_var((short)(getPIM_noOffTerFound_var() + 1));
sendPrompt_via_human_output((String) ("second themometer v2"));
sendPrompt_via_human_output((String) ("Please add one switch device"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("830264394",add_deviceType, human_input_port, state_PIM_PIM_behavior_Build_AddThermo, state_PIM_PIM_behavior_Build_AddThermo){
@Override
public void doExecute(final Event e) {
final Add_deviceMessageType.Add_deviceMessage add_device = (Add_deviceMessageType.Add_deviceMessage) e;
sendPrompt_via_human_output((String) ("Please add thermometer"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("830264394",SwitchOnType, human_input_port, state_PIM_PIM_behavior_Build_AddThermo, state_PIM_PIM_behavior_Build_AddThermo){
@Override
public void doExecute(final Event e) {
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendPrompt_via_human_output((String) ("Please add thermometer"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("830264394",SwitchOffType, human_input_port, state_PIM_PIM_behavior_Build_AddThermo, state_PIM_PIM_behavior_Build_AddThermo){
@Override
public void doExecute(final Event e) {
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendPrompt_via_human_output((String) ("Please add thermometer"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("830264394",set_temperatureType, human_input_port, state_PIM_PIM_behavior_Build_AddThermo, state_PIM_PIM_behavior_Build_AddThermo){
@Override
public void doExecute(final Event e) {
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
sendPrompt_via_human_output((String) ("Please add thermometer"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("830264394",set_polling_intervalType, human_input_port, state_PIM_PIM_behavior_Build_AddThermo, state_PIM_PIM_behavior_Build_AddThermo){
@Override
public void doExecute(final Event e) {
final Set_polling_intervalMessageType.Set_polling_intervalMessage set_polling_interval = (Set_polling_intervalMessageType.Set_polling_intervalMessage) e;
sendPrompt_via_human_output((String) ("Please add thermometer"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("1209666981",add_deviceType, human_input_port, state_PIM_PIM_behavior_Build_AddDevice, state_PIM_PIM_behavior_Build_SetThermostat){
@Override
public void doExecute(final Event e) {
final Add_deviceMessageType.Add_deviceMessage add_device = (Add_deviceMessageType.Add_deviceMessage) e;
PIM_switch_id_var = (short) (add_device.did);
sendAdd_device_via_request_actuator((short) (getPIM_switch_id_var()));
sendPrompt_via_human_output((String) ("Please give thermostat temperature setting"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("2000050411",SwitchOnType, human_input_port, state_PIM_PIM_behavior_Build_AddDevice, state_PIM_PIM_behavior_Build_AddDevice){
@Override
public void doExecute(final Event e) {
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendPrompt_via_human_output((String) ("Please add device"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("2000050411",SwitchOffType, human_input_port, state_PIM_PIM_behavior_Build_AddDevice, state_PIM_PIM_behavior_Build_AddDevice){
@Override
public void doExecute(final Event e) {
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendPrompt_via_human_output((String) ("Please add device"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("2000050411",set_polling_intervalType, human_input_port, state_PIM_PIM_behavior_Build_AddDevice, state_PIM_PIM_behavior_Build_AddDevice){
@Override
public void doExecute(final Event e) {
final Set_polling_intervalMessageType.Set_polling_intervalMessage set_polling_interval = (Set_polling_intervalMessageType.Set_polling_intervalMessage) e;
sendPrompt_via_human_output((String) ("Please add device"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("482169788",add_thermometerType, human_input_port, state_PIM_PIM_behavior_Build_AddDevice, state_PIM_PIM_behavior_Build_AddDevice){
@Override
public void doExecute(final Event e) {
final Add_thermometerMessageType.Add_thermometerMessage add_thermometer = (Add_thermometerMessageType.Add_thermometerMessage) e;
sendPrompt_via_human_output((String) ("Thermometer already added, add device"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("48753559",set_temperature_rangeType, human_input_port, state_PIM_PIM_behavior_Build_SetRange, state_PIM_PIM_behavior_Build_SetThermostat){
@Override
public void doExecute(final Event e) {
final Set_temperature_rangeMessageType.Set_temperature_rangeMessage set_temperature_range = (Set_temperature_rangeMessageType.Set_temperature_rangeMessage) e;
PIM_temperature_range_var = (float) (set_temperature_range.range);
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("1664769883",add_thermometerType, human_input_port, state_PIM_PIM_behavior_Build_SetThermostat, state_PIM_PIM_behavior_Build_SetThermostat){
@Override
public void doExecute(final Event e) {
final Add_thermometerMessageType.Add_thermometerMessage add_thermometer = (Add_thermometerMessageType.Add_thermometerMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("1664769883",add_deviceType, human_input_port, state_PIM_PIM_behavior_Build_SetThermostat, state_PIM_PIM_behavior_Build_SetThermostat){
@Override
public void doExecute(final Event e) {
final Add_deviceMessageType.Add_deviceMessage add_device = (Add_deviceMessageType.Add_deviceMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("1664769883",SwitchOnType, human_input_port, state_PIM_PIM_behavior_Build_SetThermostat, state_PIM_PIM_behavior_Build_SetThermostat){
@Override
public void doExecute(final Event e) {
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("1664769883",SwitchOffType, human_input_port, state_PIM_PIM_behavior_Build_SetThermostat, state_PIM_PIM_behavior_Build_SetThermostat){
@Override
public void doExecute(final Event e) {
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
}

});
transitions_PIM_PIM_behavior_Build.add(new Transition("1664769883",set_polling_intervalType, human_input_port, state_PIM_PIM_behavior_Build_SetThermostat, state_PIM_PIM_behavior_Build_SetThermostat){
@Override
public void doExecute(final Event e) {
final Set_polling_intervalMessageType.Set_polling_intervalMessage set_polling_interval = (Set_polling_intervalMessageType.Set_polling_intervalMessage) e;
sendPrompt_via_human_output((String) ("Please set temperature for Thermostat"));
}

});
final CompositeState state_PIM_PIM_behavior_Build = new CompositeState("Build", states_PIM_PIM_behavior_Build, state_PIM_PIM_behavior_Build_AddThermo, transitions_PIM_PIM_behavior_Build, regions_PIM_PIM_behavior_Build, true){
@Override
public void onEntry() {
sendTimer_start_via_guard_human((short) (30000));
super.onEntry();
}

@Override
public void onExit() {
super.onExit();
sendTimer_cancel_via_guard_human();
}

}
;
return state_PIM_PIM_behavior_Build;
}

private CompositeState buildPIM_PIM_behavior_Running(){
final List<AtomicState> states_PIM_PIM_behavior_Running = new ArrayList<AtomicState>();
final CompositeState state_PIM_PIM_behavior_Running_Thermostat = buildPIM_PIM_behavior_Running_Thermostat();
states_PIM_PIM_behavior_Running.add(state_PIM_PIM_behavior_Running_Thermostat);
final AtomicState state_PIM_PIM_behavior_Running_On = new AtomicState("On")
;
states_PIM_PIM_behavior_Running.add(state_PIM_PIM_behavior_Running_On);
final AtomicState state_PIM_PIM_behavior_Running_Off = new AtomicState("Off")
;
states_PIM_PIM_behavior_Running.add(state_PIM_PIM_behavior_Running_Off);
final List<Region> regions_PIM_PIM_behavior_Running = new ArrayList<Region>();
final List<Handler> transitions_PIM_PIM_behavior_Running = new ArrayList<Handler>();
transitions_PIM_PIM_behavior_Running.add(new Transition("1325906645",SwitchOnType, human_input_port, state_PIM_PIM_behavior_Running_Thermostat, state_PIM_PIM_behavior_Running_On){
@Override
public void doExecute(final Event e) {
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((short) (SwitchOn.did));
}

});
transitions_PIM_PIM_behavior_Running.add(new Transition("1341618659",SwitchOffType, human_input_port, state_PIM_PIM_behavior_Running_Thermostat, state_PIM_PIM_behavior_Running_Off){
@Override
public void doExecute(final Event e) {
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((short) (SwitchOff.did));
}

});
transitions_PIM_PIM_behavior_Running.add(new Transition("1703246403",set_temperatureType, human_input_port, state_PIM_PIM_behavior_Running_Thermostat, state_PIM_PIM_behavior_Running_Thermostat){
@Override
public void doExecute(final Event e) {
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (float) (set_temperature.t);
}

});
transitions_PIM_PIM_behavior_Running.add(new Transition("1422376398",SwitchOffType, human_input_port, state_PIM_PIM_behavior_Running_On, state_PIM_PIM_behavior_Running_Off){
@Override
public void doExecute(final Event e) {
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((short) (SwitchOff.did));
}

});
transitions_PIM_PIM_behavior_Running.add(new Transition("1013984090",SwitchOnType, human_input_port, state_PIM_PIM_behavior_Running_On, state_PIM_PIM_behavior_Running_On){
@Override
public void doExecute(final Event e) {
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((short) (SwitchOn.did));
}

});
transitions_PIM_PIM_behavior_Running.add(new Transition("441620747",set_temperatureType, human_input_port, state_PIM_PIM_behavior_Running_On, state_PIM_PIM_behavior_Running_Thermostat){
@Override
public void doExecute(final Event e) {
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (float) (set_temperature.t);
}

});
transitions_PIM_PIM_behavior_Running.add(new Transition("1586366636",temperatureType, get_sensor_port, state_PIM_PIM_behavior_Running_On, state_PIM_PIM_behavior_Running_On){
@Override
public void doExecute(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
if(getPIM_lasttemp_var() > temperature.t) {
sendSwitchOn_via_request_actuator((short) (getPIM_switch_id_var()));

}
PIM_lasttemp_var = (float) (temperature.t);
}

});
transitions_PIM_PIM_behavior_Running.add(new Transition("1395122962",SwitchOffType, human_input_port, state_PIM_PIM_behavior_Running_Off, state_PIM_PIM_behavior_Running_Off){
@Override
public void doExecute(final Event e) {
final SwitchOffMessageType.SwitchOffMessage SwitchOff = (SwitchOffMessageType.SwitchOffMessage) e;
sendSwitchOff_via_request_actuator((short) (SwitchOff.did));
}

});
transitions_PIM_PIM_behavior_Running.add(new Transition("49532942",SwitchOnType, human_input_port, state_PIM_PIM_behavior_Running_Off, state_PIM_PIM_behavior_Running_On){
@Override
public void doExecute(final Event e) {
final SwitchOnMessageType.SwitchOnMessage SwitchOn = (SwitchOnMessageType.SwitchOnMessage) e;
sendSwitchOn_via_request_actuator((short) (SwitchOn.did));
}

});
transitions_PIM_PIM_behavior_Running.add(new Transition("1293008607",set_temperatureType, human_input_port, state_PIM_PIM_behavior_Running_Off, state_PIM_PIM_behavior_Running_Thermostat){
@Override
public void doExecute(final Event e) {
final Set_temperatureMessageType.Set_temperatureMessage set_temperature = (Set_temperatureMessageType.Set_temperatureMessage) e;
PIM_tmrature_var = (float) (set_temperature.t);
}

});
transitions_PIM_PIM_behavior_Running.add(new Transition("2038938123",temperatureType, get_sensor_port, state_PIM_PIM_behavior_Running_Off, state_PIM_PIM_behavior_Running_Off){
@Override
public void doExecute(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
if(getPIM_lasttemp_var() < temperature.t) {
sendSwitchOff_via_request_actuator((short) (getPIM_switch_id_var()));

}
PIM_lasttemp_var = (float) (temperature.t);
}

});
final CompositeState state_PIM_PIM_behavior_Running = new CompositeState("Running", states_PIM_PIM_behavior_Running, state_PIM_PIM_behavior_Running_Thermostat, transitions_PIM_PIM_behavior_Running, regions_PIM_PIM_behavior_Running, true);
return state_PIM_PIM_behavior_Running;
}

private CompositeState buildPIM_PIM_behavior_Running_Thermostat(){
final List<AtomicState> states_PIM_PIM_behavior_Running_Thermostat = new ArrayList<AtomicState>();
final AtomicState state_PIM_PIM_behavior_Running_Thermostat_TemprDecide = new AtomicState("TemprDecide")
{
@Override
public void onEntry() {
sendTimer_start_via_guard_temperature((short) (15000));
}

@Override
public void onExit() {
sendTimer_cancel_via_guard_temperature();
}

};
states_PIM_PIM_behavior_Running_Thermostat.add(state_PIM_PIM_behavior_Running_Thermostat_TemprDecide);
final AtomicState state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease = new AtomicState("TemprIncrease")
{
@Override
public void onEntry() {
sendTimer_start_via_guard_temperature((short) (15000));
}

@Override
public void onExit() {
sendTimer_cancel_via_guard_temperature();
}

};
states_PIM_PIM_behavior_Running_Thermostat.add(state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease);
final AtomicState state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease = new AtomicState("TemprDecrease")
{
@Override
public void onEntry() {
sendTimer_start_via_guard_temperature((short) (15000));
}

@Override
public void onExit() {
sendTimer_cancel_via_guard_temperature();
}

};
states_PIM_PIM_behavior_Running_Thermostat.add(state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease);
final List<Region> regions_PIM_PIM_behavior_Running_Thermostat = new ArrayList<Region>();
final List<Handler> transitions_PIM_PIM_behavior_Running_Thermostat = new ArrayList<Handler>();
transitions_PIM_PIM_behavior_Running_Thermostat.add(new Transition("1330731120",temperatureType, get_sensor_port, state_PIM_PIM_behavior_Running_Thermostat_TemprDecide, state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease){
@Override
public boolean doCheck(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t >= getPIM_tmrature_var() - getPIM_temperature_range_var();
}

@Override
public void doExecute(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
sendSwitchOff_via_request_actuator((short) (getPIM_switch_id_var()));
PIM_lasttemp_var = (float) (temperature.t);
}

});
transitions_PIM_PIM_behavior_Running_Thermostat.add(new Transition("375131282",temperatureType, get_sensor_port, state_PIM_PIM_behavior_Running_Thermostat_TemprDecide, state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease){
@Override
public boolean doCheck(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t < getPIM_tmrature_var() - getPIM_temperature_range_var();
}

@Override
public void doExecute(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
sendSwitchOn_via_request_actuator((short) (getPIM_switch_id_var()));
PIM_lasttemp_var = (float) (temperature.t);
}

});
transitions_PIM_PIM_behavior_Running_Thermostat.add(new Transition("748374793",timer_timeoutType, guard_temperature_port, state_PIM_PIM_behavior_Running_Thermostat_TemprDecide, state_PIM_PIM_behavior_Running_Thermostat_TemprDecide){
@Override
public void doExecute(final Event e) {
sendPrompt_via_human_output((String) ("WARNING: @TemprDecide - temperature measurement is delayed"));
}

});
transitions_PIM_PIM_behavior_Running_Thermostat.add(new Transition("697715030",temperatureType, get_sensor_port, state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease, state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease){
@Override
public boolean doCheck(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t <= getPIM_tmrature_var() + getPIM_temperature_range_var();
}

@Override
public void doExecute(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
if(getPIM_lasttemp_var() > temperature.t) {
sendSwitchOn_via_request_actuator((short) (getPIM_switch_id_var()));

}
PIM_lasttemp_var = (float) (temperature.t);
}

});
transitions_PIM_PIM_behavior_Running_Thermostat.add(new Transition("1637873215",temperatureType, get_sensor_port, state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease, state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease){
@Override
public boolean doCheck(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t > getPIM_tmrature_var() + getPIM_temperature_range_var();
}

@Override
public void doExecute(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
sendSwitchOff_via_request_actuator((short) (getPIM_switch_id_var()));
PIM_lasttemp_var = (float) (temperature.t);
}

});
transitions_PIM_PIM_behavior_Running_Thermostat.add(new Transition("1154088238",timer_timeoutType, guard_temperature_port, state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease, state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease){
@Override
public void doExecute(final Event e) {
sendPrompt_via_human_output((String) ("WARNING: @TemprIncrease - temperature measurement is delayed"));
}

});
transitions_PIM_PIM_behavior_Running_Thermostat.add(new Transition("1564207396",temperatureType, get_sensor_port, state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease, state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease){
@Override
public boolean doCheck(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t >= getPIM_tmrature_var() - getPIM_temperature_range_var();
}

@Override
public void doExecute(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
if(getPIM_lasttemp_var() < temperature.t) {
sendSwitchOff_via_request_actuator((short) (getPIM_switch_id_var()));

}
PIM_lasttemp_var = (float) (temperature.t);
}

});
transitions_PIM_PIM_behavior_Running_Thermostat.add(new Transition("1307907853",temperatureType, get_sensor_port, state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease, state_PIM_PIM_behavior_Running_Thermostat_TemprIncrease){
@Override
public boolean doCheck(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
return temperature.t < getPIM_tmrature_var() - getPIM_temperature_range_var();
}

@Override
public void doExecute(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
sendSwitchOn_via_request_actuator((short) (getPIM_switch_id_var()));
PIM_lasttemp_var = (float) (temperature.t);
}

});
transitions_PIM_PIM_behavior_Running_Thermostat.add(new Transition("421376841",timer_timeoutType, guard_temperature_port, state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease, state_PIM_PIM_behavior_Running_Thermostat_TemprDecrease){
@Override
public void doExecute(final Event e) {
sendPrompt_via_human_output((String) ("WARNING: @TemprDecrease - temperature measurement is delayed"));
}

});
final CompositeState state_PIM_PIM_behavior_Running_Thermostat = new CompositeState("Thermostat", states_PIM_PIM_behavior_Running_Thermostat, state_PIM_PIM_behavior_Running_Thermostat_TemprDecide, transitions_PIM_PIM_behavior_Running_Thermostat, regions_PIM_PIM_behavior_Running_Thermostat, false);
return state_PIM_PIM_behavior_Running_Thermostat;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
get_sensor_port = new Port(PortType.PROVIDED, "get_sensor", this);
request_sensor_port = new Port(PortType.REQUIRED, "request_sensor", this);
request_actuator_port = new Port(PortType.REQUIRED, "request_actuator", this);
human_input_port = new Port(PortType.PROVIDED, "human_input", this);
human_output_port = new Port(PortType.REQUIRED, "human_output", this);
guard_temperature_port = new Port(PortType.REQUIRED, "guard_temperature", this);
guard_human_port = new Port(PortType.REQUIRED, "guard_human", this);
} else {
get_sensor_port = ((PIM)root).get_sensor_port;
request_sensor_port = ((PIM)root).request_sensor_port;
request_actuator_port = ((PIM)root).request_actuator_port;
human_input_port = ((PIM)root).human_input_port;
human_output_port = ((PIM)root).human_output_port;
guard_temperature_port = ((PIM)root).guard_temperature_port;
guard_human_port = ((PIM)root).guard_human_port;
}
createCepStreams();if (session == null){
//Init state machine
behavior = buildPIM_PIM_behavior();
}
return this;
}

}
