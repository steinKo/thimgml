/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : ThermometerSet
 **/
public class ThermometerSet extends Component implements IThermometerSet_require_val, IThermometerSet_initial, IThermometerSet_get_values, IThermometerSet_timer {

private List<AttributeListener> attListener = new ArrayList<AttributeListener>();
public void addAttributeListener(AttributeListener listener){
this.attListener.add(listener);
}

public void removeAttributeListener(AttributeListener listener){
this.attListener.remove(listener);
}

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
@Override
public String toString() {
String result = "instance " + getName() + "\n";
result += "\tts = " + ThermometerSet_ts_var;
result += "\tthermometers = " + ThermometerSet_thermometers_var;
result += "\tthermotext = " + ThermometerSet_thermotext_var;
result += "\tthermoweight = " + ThermometerSet_thermoweight_var;
result += "\tthermoval = " + ThermometerSet_thermoval_var;
result += "\tlast_thermo = " + ThermometerSet_last_thermo_var;
result += "\ti = " + ThermometerSet_i_var;
result += "\tpoll_intrvl = " + ThermometerSet_poll_intrvl_var;
result += "\tid_s = " + ThermometerSet_id_s_var;
result += "\tsensortype = " + ThermometerSet_sensortype_var;
result += "\ttemp_s = " + ThermometerSet_temp_s_var;
result += "\tfound = " + ThermometerSet_found_var;
result += "\tweight = " + ThermometerSet_weight_var;
result += "\tsensors = " + PSMSensorSet_sensors_var;
result += "";
return result;
}

private Collection<IThermometerSet_provide_valClient> provide_val_clients = Collections.synchronizedCollection(new LinkedList<IThermometerSet_provide_valClient>());
public synchronized void registerOnProvide_val(IThermometerSet_provide_valClient client){
provide_val_clients.add(client);
}

public synchronized void unregisterFromProvide_val(IThermometerSet_provide_valClient client){
provide_val_clients.remove(client);
}

private Collection<IThermometerSet_show_valuesClient> show_values_clients = Collections.synchronizedCollection(new LinkedList<IThermometerSet_show_valuesClient>());
public synchronized void registerOnShow_values(IThermometerSet_show_valuesClient client){
show_values_clients.add(client);
}

public synchronized void unregisterFromShow_values(IThermometerSet_show_valuesClient client){
show_values_clients.remove(client);
}

private Collection<IThermometerSet_timerClient> timer_clients = Collections.synchronizedCollection(new LinkedList<IThermometerSet_timerClient>());
public synchronized void registerOnTimer(IThermometerSet_timerClient client){
timer_clients.add(client);
}

public synchronized void unregisterFromTimer(IThermometerSet_timerClient client){
timer_clients.remove(client);
}

@Override
public synchronized void add_thermometer_via_require_val(short TemperatureMsg_add_thermometer_id_var, String TemperatureMsg_add_thermometer_txt_var){
receive(add_thermometerType.instantiate(TemperatureMsg_add_thermometer_id_var, TemperatureMsg_add_thermometer_txt_var), require_val_port);
}

@Override
public synchronized void set_polling_interval_via_require_val(short GeneralMsg_set_polling_interval_intrvl_var){
receive(set_polling_intervalType.instantiate(GeneralMsg_set_polling_interval_intrvl_var), require_val_port);
}

@Override
public synchronized void initialize_via_initial(String PSM_Msg_initialize_ts_var){
receive(initializeType.instantiate(PSM_Msg_initialize_ts_var), initial_port);
}

@Override
public synchronized void temperature_via_get_values(short TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, float TemperatureMsg_temperature_t_var){
receive(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var), get_values_port);
}

@Override
public synchronized void timer_timeout_via_timer(){
receive(timer_timeoutType.instantiate(), timer_port);
}

private void sendTemperature_via_provide_val(short TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, float TemperatureMsg_temperature_t_var){
//ThingML send
provide_val_port.send(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var));
//send to other clients
for(IThermometerSet_provide_valClient client : provide_val_clients){
client.temperature_from_provide_val(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var);
}}

private void sendTemperature_via_show_values(short TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, float TemperatureMsg_temperature_t_var){
//ThingML send
show_values_port.send(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var));
//send to other clients
for(IThermometerSet_show_valuesClient client : show_values_clients){
client.temperature_from_show_values(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var);
}}

private void sendTimer_start_via_timer(short TimerMsgs_timer_start_delay_var){
//ThingML send
timer_port.send(timer_startType.instantiate(TimerMsgs_timer_start_delay_var));
//send to other clients
for(IThermometerSet_timerClient client : timer_clients){
client.timer_start_from_timer(TimerMsgs_timer_start_delay_var);
}}

private void sendTimer_cancel_via_timer(){
//ThingML send
timer_port.send(timer_cancelType.instantiate());
//send to other clients
for(IThermometerSet_timerClient client : timer_clients){
client.timer_cancel_from_timer();
}}

//Attributes
private String ThermometerSet_ts_var;
private short[] ThermometerSet_thermometers_var;
private String[] ThermometerSet_thermotext_var;
private float[] ThermometerSet_thermoweight_var;
private float[] ThermometerSet_thermoval_var;
private short ThermometerSet_last_thermo_var;
private short ThermometerSet_i_var;
private short ThermometerSet_poll_intrvl_var;
private int ThermometerSet_id_s_var;
private short ThermometerSet_sensortype_var;
private float ThermometerSet_temp_s_var;
private boolean ThermometerSet_found_var;
private float[] ThermometerSet_weight_var;
private short PSMSensorSet_sensors_var;
private String debug_ThermometerSet_ts_var;
private short[] debug_ThermometerSet_thermometers_var;
private String[] debug_ThermometerSet_thermotext_var;
private float[] debug_ThermometerSet_thermoweight_var;
private float[] debug_ThermometerSet_thermoval_var;
private short debug_ThermometerSet_last_thermo_var;
private short debug_ThermometerSet_i_var;
private short debug_ThermometerSet_poll_intrvl_var;
private int debug_ThermometerSet_id_s_var;
private short debug_ThermometerSet_sensortype_var;
private float debug_ThermometerSet_temp_s_var;
private boolean debug_ThermometerSet_found_var;
private float[] debug_ThermometerSet_weight_var;
private short debug_PSMSensorSet_sensors_var;
//Ports
private Port provide_val_port;
private Port show_values_port;
private Port require_val_port;
private Port initial_port;
private Port get_values_port;
private Port timer_port;
//Message types
protected final TemperatureMessageType temperatureType = new TemperatureMessageType();
public TemperatureMessageType getTemperatureType(){
return temperatureType;
}

protected final Temperature2MessageType temperature2Type = new Temperature2MessageType();
public Temperature2MessageType getTemperature2Type(){
return temperature2Type;
}

protected final Add_thermometerMessageType add_thermometerType = new Add_thermometerMessageType();
public Add_thermometerMessageType getAdd_thermometerType(){
return add_thermometerType;
}

protected final Set_temperatureMessageType set_temperatureType = new Set_temperatureMessageType();
public Set_temperatureMessageType getSet_temperatureType(){
return set_temperatureType;
}

protected final Set_temperature_rangeMessageType set_temperature_rangeType = new Set_temperature_rangeMessageType();
public Set_temperature_rangeMessageType getSet_temperature_rangeType(){
return set_temperature_rangeType;
}

protected final SensorinfoMessageType sensorinfoType = new SensorinfoMessageType();
public SensorinfoMessageType getSensorinfoType(){
return sensorinfoType;
}

protected final DeviceinfoMessageType deviceinfoType = new DeviceinfoMessageType();
public DeviceinfoMessageType getDeviceinfoType(){
return deviceinfoType;
}

protected final Set_polling_intervalMessageType set_polling_intervalType = new Set_polling_intervalMessageType();
public Set_polling_intervalMessageType getSet_polling_intervalType(){
return set_polling_intervalType;
}

protected final PromptMessageType promptType = new PromptMessageType();
public PromptMessageType getPromptType(){
return promptType;
}

protected final InitializeMessageType initializeType = new InitializeMessageType();
public InitializeMessageType getInitializeType(){
return initializeType;
}

protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
public Timer_startMessageType getTimer_startType(){
return timer_startType;
}

protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
public Timer_cancelMessageType getTimer_cancelType(){
return timer_cancelType;
}

protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
public Timer_timeoutMessageType getTimer_timeoutType(){
return timer_timeoutType;
}

//CEP Streams
//Empty Constructor
public ThermometerSet() {
super();
ThermometerSet_last_thermo_var = (short) 0;
ThermometerSet_poll_intrvl_var = (short) 10000;
}

//Constructor (all attributes)
public ThermometerSet(String name, final String ThermometerSet_ts_var, final short[] ThermometerSet_thermometers_var, final String[] ThermometerSet_thermotext_var, final float[] ThermometerSet_thermoweight_var, final float[] ThermometerSet_thermoval_var, final short ThermometerSet_last_thermo_var, final short ThermometerSet_i_var, final short ThermometerSet_poll_intrvl_var, final int ThermometerSet_id_s_var, final short ThermometerSet_sensortype_var, final float ThermometerSet_temp_s_var, final boolean ThermometerSet_found_var, final float[] ThermometerSet_weight_var, final short PSMSensorSet_sensors_var) {
super(name);
this.ThermometerSet_ts_var = ThermometerSet_ts_var;
this.ThermometerSet_thermometers_var = ThermometerSet_thermometers_var;
this.ThermometerSet_thermotext_var = ThermometerSet_thermotext_var;
this.ThermometerSet_thermoweight_var = ThermometerSet_thermoweight_var;
this.ThermometerSet_thermoval_var = ThermometerSet_thermoval_var;
this.ThermometerSet_last_thermo_var = ThermometerSet_last_thermo_var;
this.ThermometerSet_i_var = ThermometerSet_i_var;
this.ThermometerSet_poll_intrvl_var = ThermometerSet_poll_intrvl_var;
this.ThermometerSet_id_s_var = ThermometerSet_id_s_var;
this.ThermometerSet_sensortype_var = ThermometerSet_sensortype_var;
this.ThermometerSet_temp_s_var = ThermometerSet_temp_s_var;
this.ThermometerSet_found_var = ThermometerSet_found_var;
this.ThermometerSet_weight_var = ThermometerSet_weight_var;
this.PSMSensorSet_sensors_var = PSMSensorSet_sensors_var;
}

//Getters and Setters for non readonly/final attributes
public String getThermometerSet_ts_var() {
return ThermometerSet_ts_var;
}

public void setThermometerSet_ts_var(String ThermometerSet_ts_var) {
this.ThermometerSet_ts_var = ThermometerSet_ts_var;
}

public short[] getThermometerSet_thermometers_var() {
return ThermometerSet_thermometers_var;
}

public void setThermometerSet_thermometers_var(short[] ThermometerSet_thermometers_var) {
this.ThermometerSet_thermometers_var = ThermometerSet_thermometers_var;
}

public String[] getThermometerSet_thermotext_var() {
return ThermometerSet_thermotext_var;
}

public void setThermometerSet_thermotext_var(String[] ThermometerSet_thermotext_var) {
this.ThermometerSet_thermotext_var = ThermometerSet_thermotext_var;
}

public float[] getThermometerSet_thermoweight_var() {
return ThermometerSet_thermoweight_var;
}

public void setThermometerSet_thermoweight_var(float[] ThermometerSet_thermoweight_var) {
this.ThermometerSet_thermoweight_var = ThermometerSet_thermoweight_var;
}

public float[] getThermometerSet_thermoval_var() {
return ThermometerSet_thermoval_var;
}

public void setThermometerSet_thermoval_var(float[] ThermometerSet_thermoval_var) {
this.ThermometerSet_thermoval_var = ThermometerSet_thermoval_var;
}

public short getThermometerSet_last_thermo_var() {
return ThermometerSet_last_thermo_var;
}

public void setThermometerSet_last_thermo_var(short ThermometerSet_last_thermo_var) {
this.ThermometerSet_last_thermo_var = ThermometerSet_last_thermo_var;
}

public short getThermometerSet_i_var() {
return ThermometerSet_i_var;
}

public void setThermometerSet_i_var(short ThermometerSet_i_var) {
this.ThermometerSet_i_var = ThermometerSet_i_var;
}

public short getThermometerSet_poll_intrvl_var() {
return ThermometerSet_poll_intrvl_var;
}

public void setThermometerSet_poll_intrvl_var(short ThermometerSet_poll_intrvl_var) {
this.ThermometerSet_poll_intrvl_var = ThermometerSet_poll_intrvl_var;
}

public int getThermometerSet_id_s_var() {
return ThermometerSet_id_s_var;
}

public void setThermometerSet_id_s_var(int ThermometerSet_id_s_var) {
this.ThermometerSet_id_s_var = ThermometerSet_id_s_var;
}

public short getThermometerSet_sensortype_var() {
return ThermometerSet_sensortype_var;
}

public void setThermometerSet_sensortype_var(short ThermometerSet_sensortype_var) {
this.ThermometerSet_sensortype_var = ThermometerSet_sensortype_var;
}

public float getThermometerSet_temp_s_var() {
return ThermometerSet_temp_s_var;
}

public void setThermometerSet_temp_s_var(float ThermometerSet_temp_s_var) {
this.ThermometerSet_temp_s_var = ThermometerSet_temp_s_var;
}

public boolean getThermometerSet_found_var() {
return ThermometerSet_found_var;
}

public void setThermometerSet_found_var(boolean ThermometerSet_found_var) {
this.ThermometerSet_found_var = ThermometerSet_found_var;
}

public float[] getThermometerSet_weight_var() {
return ThermometerSet_weight_var;
}

public void setThermometerSet_weight_var(float[] ThermometerSet_weight_var) {
this.ThermometerSet_weight_var = ThermometerSet_weight_var;
}

public short getPSMSensorSet_sensors_var() {
return PSMSensorSet_sensors_var;
}

public void setPSMSensorSet_sensors_var(short PSMSensorSet_sensors_var) {
this.PSMSensorSet_sensors_var = PSMSensorSet_sensors_var;
}

//Getters for Ports
public Port getProvide_val_port() {
return provide_val_port;
}
public Port getShow_values_port() {
return show_values_port;
}
public Port getRequire_val_port() {
return require_val_port;
}
public Port getInitial_port() {
return initial_port;
}
public Port getGet_values_port() {
return get_values_port;
}
public Port getTimer_port() {
return timer_port;
}
private CompositeState buildThermometerSet_behaviorThermometerSet(){
final List<AtomicState> states_ThermometerSet_behaviorThermometerSet = new ArrayList<AtomicState>();
final AtomicState state_ThermometerSet_behaviorThermometerSet_Init = new AtomicState("Init")
;
states_ThermometerSet_behaviorThermometerSet.add(state_ThermometerSet_behaviorThermometerSet_Init);
final AtomicState state_ThermometerSet_behaviorThermometerSet_Idle = new AtomicState("Idle")
{
@Override
public void onEntry() {
sendTimer_start_via_timer((short) (getThermometerSet_poll_intrvl_var()));
}

@Override
public void onExit() {
sendTimer_cancel_via_timer();
}

};
states_ThermometerSet_behaviorThermometerSet.add(state_ThermometerSet_behaviorThermometerSet_Idle);
final List<Region> regions_ThermometerSet_behaviorThermometerSet = new ArrayList<Region>();
final List<Handler> transitions_ThermometerSet_behaviorThermometerSet = new ArrayList<Handler>();
transitions_ThermometerSet_behaviorThermometerSet.add(new Transition("1134592116",initializeType, initial_port, state_ThermometerSet_behaviorThermometerSet_Init, state_ThermometerSet_behaviorThermometerSet_Idle){
@Override
public void doExecute(final Event e) {
final InitializeMessageType.InitializeMessage initialize = (InitializeMessageType.InitializeMessage) e;
ThermometerSet_ts_var = (String) (initialize.ts);
}

});
transitions_ThermometerSet_behaviorThermometerSet.add(new Transition("764491955",timer_timeoutType, timer_port, state_ThermometerSet_behaviorThermometerSet_Idle, state_ThermometerSet_behaviorThermometerSet_Idle){
@Override
public void doExecute(final Event e) {
ThermometerSet_weight_var[0] = (float) (0.3);
ThermometerSet_weight_var[1] = (float) (0.7);
ThermometerSet_temp_s_var = (float) (0);
ThermometerSet_i_var = (short) (0);
while(getThermometerSet_i_var() < getThermometerSet_last_thermo_var()) {
ThermometerSet_id_s_var = (int) (ThermometerSet_thermometers_var[getThermometerSet_i_var()]
);
ThermometerSet_temp_s_var = (float) (getThermometerSet_temp_s_var() + ThermometerSet_thermoval_var[getThermometerSet_i_var()]
 * ThermometerSet_weight_var[getThermometerSet_i_var()]
);
ThermometerSet_i_var = (short) (getThermometerSet_i_var() + 1);

}
if(getThermometerSet_temp_s_var() >  -40 && getThermometerSet_temp_s_var() < 50) {
sendTemperature_via_provide_val((short) (getThermometerSet_id_s_var()), (String) (ThermometerSet_thermotext_var[getThermometerSet_i_var()]
), (float) (getThermometerSet_temp_s_var()));
sendTemperature_via_show_values((short) (getThermometerSet_id_s_var()), (String) (ThermometerSet_thermotext_var[getThermometerSet_i_var()]
), (float) (getThermometerSet_temp_s_var()));

}
}

});
transitions_ThermometerSet_behaviorThermometerSet.add(new Transition("1784604560",set_polling_intervalType, require_val_port, state_ThermometerSet_behaviorThermometerSet_Idle, state_ThermometerSet_behaviorThermometerSet_Idle){
@Override
public void doExecute(final Event e) {
final Set_polling_intervalMessageType.Set_polling_intervalMessage set_polling_interval = (Set_polling_intervalMessageType.Set_polling_intervalMessage) e;
ThermometerSet_poll_intrvl_var = (short) (set_polling_interval.intrvl);
}

});
transitions_ThermometerSet_behaviorThermometerSet.add(new Transition("797726967",add_thermometerType, require_val_port, state_ThermometerSet_behaviorThermometerSet_Idle, state_ThermometerSet_behaviorThermometerSet_Idle){
@Override
public void doExecute(final Event e) {
final Add_thermometerMessageType.Add_thermometerMessage add_thermometer = (Add_thermometerMessageType.Add_thermometerMessage) e;
ThermometerSet_id_s_var = (int) (add_thermometer.id);
ThermometerSet_thermometers_var[getThermometerSet_last_thermo_var()] = (short) (getThermometerSet_id_s_var());
ThermometerSet_thermotext_var[getThermometerSet_last_thermo_var()] = (String) (add_thermometer.txt);
ThermometerSet_thermoval_var[getThermometerSet_last_thermo_var()] = (float) (0);
ThermometerSet_last_thermo_var = (short) (getThermometerSet_last_thermo_var() + 1);
}

});
transitions_ThermometerSet_behaviorThermometerSet.add(new Transition("286968422",temperatureType, get_values_port, state_ThermometerSet_behaviorThermometerSet_Idle, state_ThermometerSet_behaviorThermometerSet_Idle){
@Override
public void doExecute(final Event e) {
final TemperatureMessageType.TemperatureMessage temperature = (TemperatureMessageType.TemperatureMessage) e;
ThermometerSet_id_s_var = (int) (temperature.id);
ThermometerSet_i_var = (short) (0);
ThermometerSet_found_var = (boolean) (false);
while(getThermometerSet_i_var() < getThermometerSet_last_thermo_var() && ( !(getThermometerSet_found_var()))) {
if(getThermometerSet_id_s_var() == ThermometerSet_thermometers_var[getThermometerSet_i_var()]
) {
ThermometerSet_found_var = (boolean) (true);

}
ThermometerSet_i_var = (short) (getThermometerSet_i_var() + 1);

}
if(getThermometerSet_found_var()) {
ThermometerSet_thermoval_var[getThermometerSet_i_var() - 1] = (float) (temperature.t);

}
}

});
final CompositeState state_ThermometerSet_behaviorThermometerSet = new CompositeState("behaviorThermometerSet", states_ThermometerSet_behaviorThermometerSet, state_ThermometerSet_behaviorThermometerSet_Init, transitions_ThermometerSet_behaviorThermometerSet, regions_ThermometerSet_behaviorThermometerSet, false);
return state_ThermometerSet_behaviorThermometerSet;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
provide_val_port = new Port(PortType.REQUIRED, "provide_val", this);
show_values_port = new Port(PortType.REQUIRED, "show_values", this);
require_val_port = new Port(PortType.PROVIDED, "require_val", this);
initial_port = new Port(PortType.PROVIDED, "initial", this);
get_values_port = new Port(PortType.PROVIDED, "get_values", this);
timer_port = new Port(PortType.REQUIRED, "timer", this);
} else {
provide_val_port = ((ThermometerSet)root).provide_val_port;
show_values_port = ((ThermometerSet)root).show_values_port;
require_val_port = ((ThermometerSet)root).require_val_port;
initial_port = ((ThermometerSet)root).initial_port;
get_values_port = ((ThermometerSet)root).get_values_port;
timer_port = ((ThermometerSet)root).timer_port;
}
createCepStreams();if (session == null){
//Init state machine
behavior = buildThermometerSet_behaviorThermometerSet();
}
return this;
}

}
