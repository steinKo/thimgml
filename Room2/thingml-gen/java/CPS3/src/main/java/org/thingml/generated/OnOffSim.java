/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : OnOffSim
 **/
public class OnOffSim extends Component implements IOnOffSim_show_onoff {

private List<AttributeListener> attListener = new ArrayList<AttributeListener>();
public void addAttributeListener(AttributeListener listener){
this.attListener.add(listener);
}

public void removeAttributeListener(AttributeListener listener){
this.attListener.remove(listener);
}

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
@Override
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

@Override
public synchronized void SwitchOn_via_show_onoff(short OnOffMsg_SwitchOn_did_var){
receive(SwitchOnType.instantiate(OnOffMsg_SwitchOn_did_var), show_onoff_port);
}

@Override
public synchronized void SwitchOff_via_show_onoff(short OnOffMsg_SwitchOff_did_var){
receive(SwitchOffType.instantiate(OnOffMsg_SwitchOff_did_var), show_onoff_port);
}

//Attributes
//Ports
private Port show_onoff_port;
//Message types
protected final SwitchOnMessageType SwitchOnType = new SwitchOnMessageType();
public SwitchOnMessageType getSwitchOnType(){
return SwitchOnType;
}

protected final SwitchOffMessageType SwitchOffType = new SwitchOffMessageType();
public SwitchOffMessageType getSwitchOffType(){
return SwitchOffType;
}

protected final Add_deviceMessageType add_deviceType = new Add_deviceMessageType();
public Add_deviceMessageType getAdd_deviceType(){
return add_deviceType;
}

//CEP Streams
//Empty Constructor
public OnOffSim() {
super();
}

//Constructor (all attributes)
public OnOffSim(String name) {
super(name);
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getShow_onoff_port() {
return show_onoff_port;
}
public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
show_onoff_port = new Port(PortType.PROVIDED, "show_onoff", this);
} else {
show_onoff_port = ((OnOffSim)root).show_onoff_port;
}
createCepStreams();if (session == null){
//Init state machine
}
return this;
}

}
