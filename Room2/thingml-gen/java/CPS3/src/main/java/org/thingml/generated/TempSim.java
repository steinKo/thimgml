/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import org.thingml.java.*;
import org.thingml.java.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : TempSim
 **/
public class TempSim extends Component implements ITempSim_show_values {

private List<AttributeListener> attListener = new ArrayList<AttributeListener>();
public void addAttributeListener(AttributeListener listener){
this.attListener.add(listener);
}

public void removeAttributeListener(AttributeListener listener){
this.attListener.remove(listener);
}

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
@Override
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

private Collection<ITempSim_give_valuesClient> give_values_clients = Collections.synchronizedCollection(new LinkedList<ITempSim_give_valuesClient>());
public synchronized void registerOnGive_values(ITempSim_give_valuesClient client){
give_values_clients.add(client);
}

public synchronized void unregisterFromGive_values(ITempSim_give_valuesClient client){
give_values_clients.remove(client);
}

@Override
public synchronized void temperature_via_show_values(short TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, float TemperatureMsg_temperature_t_var){
receive(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var), show_values_port);
}

private void sendTemperature_via_give_values(short TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, float TemperatureMsg_temperature_t_var){
//ThingML send
give_values_port.send(temperatureType.instantiate(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var));
//send to other clients
for(ITempSim_give_valuesClient client : give_values_clients){
client.temperature_from_give_values(TemperatureMsg_temperature_id_var, TemperatureMsg_temperature_txt_var, TemperatureMsg_temperature_t_var);
}}

//Attributes
//Ports
private Port give_values_port;
private Port show_values_port;
//Message types
protected final TemperatureMessageType temperatureType = new TemperatureMessageType();
public TemperatureMessageType getTemperatureType(){
return temperatureType;
}

protected final Temperature2MessageType temperature2Type = new Temperature2MessageType();
public Temperature2MessageType getTemperature2Type(){
return temperature2Type;
}

protected final Add_thermometerMessageType add_thermometerType = new Add_thermometerMessageType();
public Add_thermometerMessageType getAdd_thermometerType(){
return add_thermometerType;
}

protected final Set_temperatureMessageType set_temperatureType = new Set_temperatureMessageType();
public Set_temperatureMessageType getSet_temperatureType(){
return set_temperatureType;
}

protected final Set_temperature_rangeMessageType set_temperature_rangeType = new Set_temperature_rangeMessageType();
public Set_temperature_rangeMessageType getSet_temperature_rangeType(){
return set_temperature_rangeType;
}

//CEP Streams
//Empty Constructor
public TempSim() {
super();
}

//Constructor (all attributes)
public TempSim(String name) {
super(name);
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getGive_values_port() {
return give_values_port;
}
public Port getShow_values_port() {
return show_values_port;
}
public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
give_values_port = new Port(PortType.REQUIRED, "give_values", this);
show_values_port = new Port(PortType.PROVIDED, "show_values", this);
} else {
give_values_port = ((TempSim)root).give_values_port;
show_values_port = ((TempSim)root).show_values_port;
}
createCepStreams();if (session == null){
//Init state machine
}
return this;
}

}
