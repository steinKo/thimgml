/**
 * File generated by the ThingML IDE
 * /!\\Do not edit this file/!\\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 */

package org.thingml.generated.gui;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;
import org.thingml.java.*;
import org.thingml.java.ext.*;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.text.SimpleDateFormat;

import java.util.*;
public class HumanMock extends Component implements ActionListener, ItemListener, IHuman_get_values{

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String instanceName;public void printDebug(String trace) {
if(this.isDebug()) {
System.out.println(this.instanceName + trace);
}
}

//Message types
private final TemperatureMessageType temperatureType = new TemperatureMessageType();
private final Temperature2MessageType temperature2Type = new Temperature2MessageType();
private final Add_thermometerMessageType add_thermometerType = new Add_thermometerMessageType();
private final Set_temperatureMessageType set_temperatureType = new Set_temperatureMessageType();
private final Set_temperature_rangeMessageType set_temperature_rangeType = new Set_temperature_rangeMessageType();
private final SensorinfoMessageType sensorinfoType = new SensorinfoMessageType();
private final DeviceinfoMessageType deviceinfoType = new DeviceinfoMessageType();
private final Set_polling_intervalMessageType set_polling_intervalType = new Set_polling_intervalMessageType();
private final PromptMessageType promptType = new PromptMessageType();
private final SwitchOnMessageType SwitchOnType = new SwitchOnMessageType();
private final SwitchOffMessageType SwitchOffType = new SwitchOffMessageType();
private final Add_deviceMessageType add_deviceType = new Add_deviceMessageType();
final Port port_Human_send_cmd;
public Port getSend_cmd_port(){return port_Human_send_cmd;}
final Port port_Human_get_values;
public Port getGet_values_port(){return port_Human_get_values;}
public java.util.List<IHuman_send_cmdClient> send_cmd_listeners = new java.util.LinkedList<IHuman_send_cmdClient>();
private SimpleDateFormat dateFormat=new SimpleDateFormat("dd MMM yyy 'at' HH:mm:ss.SSS");

private JTabbedPane tabbedPane=new JTabbedPane();
private JFrame frame;

        //Attributes related to add_thermometer via send_cmd
public JButton sendadd_thermometer_via_send_cmd;
private JTextField fieldadd_thermometer_via_send_cmd_Id;
public JTextField getFieldadd_thermometer_via_send_cmd_Id() {
return fieldadd_thermometer_via_send_cmd_Id;
}

private JTextField fieldadd_thermometer_via_send_cmd_Txt;
public JTextField getFieldadd_thermometer_via_send_cmd_Txt() {
return fieldadd_thermometer_via_send_cmd_Txt;
}

public JButton getSendadd_thermometer_via_send_cmd() {
return sendadd_thermometer_via_send_cmd;
}

//Attributes related to add_device via send_cmd
public JButton sendadd_device_via_send_cmd;
private JTextField fieldadd_device_via_send_cmd_Did;
public JTextField getFieldadd_device_via_send_cmd_Did() {
return fieldadd_device_via_send_cmd_Did;
}

public JButton getSendadd_device_via_send_cmd() {
return sendadd_device_via_send_cmd;
}

//Attributes related to SwitchOn via send_cmd
public JButton sendSwitchOn_via_send_cmd;
private JTextField fieldSwitchOn_via_send_cmd_Did;
public JTextField getFieldSwitchOn_via_send_cmd_Did() {
return fieldSwitchOn_via_send_cmd_Did;
}

public JButton getSendSwitchOn_via_send_cmd() {
return sendSwitchOn_via_send_cmd;
}

//Attributes related to SwitchOff via send_cmd
public JButton sendSwitchOff_via_send_cmd;
private JTextField fieldSwitchOff_via_send_cmd_Did;
public JTextField getFieldSwitchOff_via_send_cmd_Did() {
return fieldSwitchOff_via_send_cmd_Did;
}

public JButton getSendSwitchOff_via_send_cmd() {
return sendSwitchOff_via_send_cmd;
}

//Attributes related to set_temperature via send_cmd
public JButton sendset_temperature_via_send_cmd;
private JTextField fieldset_temperature_via_send_cmd_T;
public JTextField getFieldset_temperature_via_send_cmd_T() {
return fieldset_temperature_via_send_cmd_T;
}

public JButton getSendset_temperature_via_send_cmd() {
return sendset_temperature_via_send_cmd;
}

//Attributes related to set_polling_interval via send_cmd
public JButton sendset_polling_interval_via_send_cmd;
private JTextField fieldset_polling_interval_via_send_cmd_Intrvl;
public JTextField getFieldset_polling_interval_via_send_cmd_Intrvl() {
return fieldset_polling_interval_via_send_cmd_Intrvl;
}

public JButton getSendset_polling_interval_via_send_cmd() {
return sendset_polling_interval_via_send_cmd;
}

//Attributes related to set_temperature_range via send_cmd
public JButton sendset_temperature_range_via_send_cmd;
private JTextField fieldset_temperature_range_via_send_cmd_Range;
public JTextField getFieldset_temperature_range_via_send_cmd_Range() {
return fieldset_temperature_range_via_send_cmd_Range;
}

public JButton getSendset_temperature_range_via_send_cmd() {
return sendset_temperature_range_via_send_cmd;
}

public void disableAll() {
sendadd_thermometer_via_send_cmd.setEnabled(false);
sendadd_device_via_send_cmd.setEnabled(false);
sendSwitchOn_via_send_cmd.setEnabled(false);
sendSwitchOff_via_send_cmd.setEnabled(false);
sendset_temperature_via_send_cmd.setEnabled(false);
sendset_polling_interval_via_send_cmd.setEnabled(false);
sendset_temperature_range_via_send_cmd.setEnabled(false);
}

public void enableAll() {
sendadd_thermometer_via_send_cmd.setEnabled(true);
sendadd_device_via_send_cmd.setEnabled(true);
sendSwitchOn_via_send_cmd.setEnabled(true);
sendSwitchOff_via_send_cmd.setEnabled(true);
sendset_temperature_via_send_cmd.setEnabled(true);
sendset_polling_interval_via_send_cmd.setEnabled(true);
sendset_temperature_range_via_send_cmd.setEnabled(true);
}



private JTextPane screen;
private JButton clearButton;
private JButton cliButton;
private StyledDocument doc;
private final Color alertColor=new Color(255,64,32);
private boolean colorOutput=false;
private JCheckBox showColor;
private JTextField cli;
private JList<Command>commands;

private synchronized boolean isColorOutput(){
        return colorOutput;
        }

private synchronized void setColorOutput(boolean value){
        this.colorOutput=value;
        }

public HumanMock(String name){
        super(name);
        port_Human_send_cmd = new Port(PortType.REQUIRED, "send_cmd", this);
port_Human_get_values = new Port(PortType.PROVIDED, "get_values", this);

        initGUI(name);
        }

@Override
public void stop(){
        super.stop();
        frame.setVisible(false);
        }

@Override
public void start(){
        super.start();
        frame.setVisible(true);
        }

@Override
public Component buildBehavior(String session,Component root){
        behavior=new CompositeState("Human",Collections.EMPTY_LIST,new AtomicState("dummy"),Collections.EMPTY_LIST){
@Override
public boolean dispatch(final Event event, final Port p){
        if(event.getPort()!=null){
        print(event.getType().getName() + "_via_" + p.getName(),dateFormat.format(new Date())+": " + p.getName() + "?"+event.toString());
        }
        return false;
        }
        };
        return this;
        }

        public JPanel createadd_thermometer_via_send_cmdPanel(){
GridBagConstraints c = new GridBagConstraints();
c.fill = GridBagConstraints.HORIZONTAL;
c.weightx = 0.5;
JPanel panel = new JPanel(new GridBagLayout());
JLabel labelid = new JLabel();
labelid.setText("id");
c.gridx = 0;
c.gridy = 0;
panel.add(labelid, c);
fieldadd_thermometer_via_send_cmd_Id = new JTextField();
fieldadd_thermometer_via_send_cmd_Id.setText("short");
c.gridx = 1;
c.gridy = 0
;panel.add(fieldadd_thermometer_via_send_cmd_Id, c);
JLabel labeltxt = new JLabel();
labeltxt.setText("txt");
c.gridx = 0;
c.gridy = 1;
panel.add(labeltxt, c);
fieldadd_thermometer_via_send_cmd_Txt = new JTextField();
fieldadd_thermometer_via_send_cmd_Txt.setText("String");
c.gridx = 1;
c.gridy = 1
;panel.add(fieldadd_thermometer_via_send_cmd_Txt, c);
return panel;
}

public JPanel createadd_device_via_send_cmdPanel(){
GridBagConstraints c = new GridBagConstraints();
c.fill = GridBagConstraints.HORIZONTAL;
c.weightx = 0.5;
JPanel panel = new JPanel(new GridBagLayout());
JLabel labeldid = new JLabel();
labeldid.setText("did");
c.gridx = 0;
c.gridy = 0;
panel.add(labeldid, c);
fieldadd_device_via_send_cmd_Did = new JTextField();
fieldadd_device_via_send_cmd_Did.setText("short");
c.gridx = 1;
c.gridy = 0
;panel.add(fieldadd_device_via_send_cmd_Did, c);
return panel;
}

public JPanel createSwitchOn_via_send_cmdPanel(){
GridBagConstraints c = new GridBagConstraints();
c.fill = GridBagConstraints.HORIZONTAL;
c.weightx = 0.5;
JPanel panel = new JPanel(new GridBagLayout());
JLabel labeldid = new JLabel();
labeldid.setText("did");
c.gridx = 0;
c.gridy = 0;
panel.add(labeldid, c);
fieldSwitchOn_via_send_cmd_Did = new JTextField();
fieldSwitchOn_via_send_cmd_Did.setText("short");
c.gridx = 1;
c.gridy = 0
;panel.add(fieldSwitchOn_via_send_cmd_Did, c);
return panel;
}

public JPanel createSwitchOff_via_send_cmdPanel(){
GridBagConstraints c = new GridBagConstraints();
c.fill = GridBagConstraints.HORIZONTAL;
c.weightx = 0.5;
JPanel panel = new JPanel(new GridBagLayout());
JLabel labeldid = new JLabel();
labeldid.setText("did");
c.gridx = 0;
c.gridy = 0;
panel.add(labeldid, c);
fieldSwitchOff_via_send_cmd_Did = new JTextField();
fieldSwitchOff_via_send_cmd_Did.setText("short");
c.gridx = 1;
c.gridy = 0
;panel.add(fieldSwitchOff_via_send_cmd_Did, c);
return panel;
}

public JPanel createset_temperature_via_send_cmdPanel(){
GridBagConstraints c = new GridBagConstraints();
c.fill = GridBagConstraints.HORIZONTAL;
c.weightx = 0.5;
JPanel panel = new JPanel(new GridBagLayout());
JLabel labelt = new JLabel();
labelt.setText("t");
c.gridx = 0;
c.gridy = 0;
panel.add(labelt, c);
fieldset_temperature_via_send_cmd_T = new JTextField();
fieldset_temperature_via_send_cmd_T.setText("float");
c.gridx = 1;
c.gridy = 0
;panel.add(fieldset_temperature_via_send_cmd_T, c);
return panel;
}

public JPanel createset_polling_interval_via_send_cmdPanel(){
GridBagConstraints c = new GridBagConstraints();
c.fill = GridBagConstraints.HORIZONTAL;
c.weightx = 0.5;
JPanel panel = new JPanel(new GridBagLayout());
JLabel labelintrvl = new JLabel();
labelintrvl.setText("intrvl");
c.gridx = 0;
c.gridy = 0;
panel.add(labelintrvl, c);
fieldset_polling_interval_via_send_cmd_Intrvl = new JTextField();
fieldset_polling_interval_via_send_cmd_Intrvl.setText("short");
c.gridx = 1;
c.gridy = 0
;panel.add(fieldset_polling_interval_via_send_cmd_Intrvl, c);
return panel;
}

public JPanel createset_temperature_range_via_send_cmdPanel(){
GridBagConstraints c = new GridBagConstraints();
c.fill = GridBagConstraints.HORIZONTAL;
c.weightx = 0.5;
JPanel panel = new JPanel(new GridBagLayout());
JLabel labelrange = new JLabel();
labelrange.setText("range");
c.gridx = 0;
c.gridy = 0;
panel.add(labelrange, c);
fieldset_temperature_range_via_send_cmd_Range = new JTextField();
fieldset_temperature_range_via_send_cmd_Range.setText("float");
c.gridx = 1;
c.gridy = 0
;panel.add(fieldset_temperature_range_via_send_cmd_Range, c);
return panel;
}



public void print(String id,String data){
        try{
        if(isColorOutput())
        doc.insertString(doc.getLength(),formatForPrint(data),doc.getStyle(id));
        else
        doc.insertString(doc.getLength(),formatForPrint(data),null);
        screen.setCaretPosition(doc.getLength());
        }catch(BadLocationException ex){
        ex.printStackTrace();
        }
        }

        public void addListener(ActionListener l){
sendadd_thermometer_via_send_cmd.addActionListener(l);
sendadd_device_via_send_cmd.addActionListener(l);
sendSwitchOn_via_send_cmd.addActionListener(l);
sendSwitchOff_via_send_cmd.addActionListener(l);
sendset_temperature_via_send_cmd.addActionListener(l);
sendset_polling_interval_via_send_cmd.addActionListener(l);
sendset_temperature_range_via_send_cmd.addActionListener(l);
}



private void initGUI(String name){

        GridBagConstraints c=new GridBagConstraints();
        c.gridwidth=1;
        c.fill=GridBagConstraints.HORIZONTAL;
        c.insets=new Insets(0,3,0,3);
        c.weightx=0.5;
        c.weighty=0;


        c.gridy=0;
        c.gridx=0;
        frame=new JFrame(name);
        frame.setLayout(new GridBagLayout());
        frame.add(tabbedPane,c);

        JPanel frame_send_cmd = new JPanel();
frame_send_cmd.setLayout(new GridBagLayout());
//GUI related to send_cmd_via_send_cmd => add_thermometer
c.gridy = 0;
c.gridx = 0;
frame_send_cmd.add(createLabel("add_thermometer"), c);
c.gridy = 1;
c.gridx = 0;
frame_send_cmd.add(createadd_thermometer_via_send_cmdPanel(), c);
c.gridy = 2;
c.gridx = 0;
c.weighty = 0;
sendadd_thermometer_via_send_cmd = createSendButton("send_cmd => add_thermometer");
frame_send_cmd.add(sendadd_thermometer_via_send_cmd, c);
tabbedPane.addTab("send_cmd", frame_send_cmd);
//GUI related to send_cmd_via_send_cmd => add_device
c.gridy = 0;
c.gridx = 1;
frame_send_cmd.add(createLabel("add_device"), c);
c.gridy = 1;
c.gridx = 1;
frame_send_cmd.add(createadd_device_via_send_cmdPanel(), c);
c.gridy = 2;
c.gridx = 1;
c.weighty = 0;
sendadd_device_via_send_cmd = createSendButton("send_cmd => add_device");
frame_send_cmd.add(sendadd_device_via_send_cmd, c);
tabbedPane.addTab("send_cmd", frame_send_cmd);
//GUI related to send_cmd_via_send_cmd => SwitchOn
c.gridy = 0;
c.gridx = 2;
frame_send_cmd.add(createLabel("SwitchOn"), c);
c.gridy = 1;
c.gridx = 2;
frame_send_cmd.add(createSwitchOn_via_send_cmdPanel(), c);
c.gridy = 2;
c.gridx = 2;
c.weighty = 0;
sendSwitchOn_via_send_cmd = createSendButton("send_cmd => SwitchOn");
frame_send_cmd.add(sendSwitchOn_via_send_cmd, c);
tabbedPane.addTab("send_cmd", frame_send_cmd);
//GUI related to send_cmd_via_send_cmd => SwitchOff
c.gridy = 0;
c.gridx = 3;
frame_send_cmd.add(createLabel("SwitchOff"), c);
c.gridy = 1;
c.gridx = 3;
frame_send_cmd.add(createSwitchOff_via_send_cmdPanel(), c);
c.gridy = 2;
c.gridx = 3;
c.weighty = 0;
sendSwitchOff_via_send_cmd = createSendButton("send_cmd => SwitchOff");
frame_send_cmd.add(sendSwitchOff_via_send_cmd, c);
tabbedPane.addTab("send_cmd", frame_send_cmd);
//GUI related to send_cmd_via_send_cmd => set_temperature
c.gridy = 0;
c.gridx = 4;
frame_send_cmd.add(createLabel("set_temperature"), c);
c.gridy = 1;
c.gridx = 4;
frame_send_cmd.add(createset_temperature_via_send_cmdPanel(), c);
c.gridy = 2;
c.gridx = 4;
c.weighty = 0;
sendset_temperature_via_send_cmd = createSendButton("send_cmd => set_temperature");
frame_send_cmd.add(sendset_temperature_via_send_cmd, c);
tabbedPane.addTab("send_cmd", frame_send_cmd);
//GUI related to send_cmd_via_send_cmd => set_polling_interval
c.gridy = 0;
c.gridx = 5;
frame_send_cmd.add(createLabel("set_polling_interval"), c);
c.gridy = 1;
c.gridx = 5;
frame_send_cmd.add(createset_polling_interval_via_send_cmdPanel(), c);
c.gridy = 2;
c.gridx = 5;
c.weighty = 0;
sendset_polling_interval_via_send_cmd = createSendButton("send_cmd => set_polling_interval");
frame_send_cmd.add(sendset_polling_interval_via_send_cmd, c);
tabbedPane.addTab("send_cmd", frame_send_cmd);
//GUI related to send_cmd_via_send_cmd => set_temperature_range
c.gridy = 0;
c.gridx = 6;
frame_send_cmd.add(createLabel("set_temperature_range"), c);
c.gridy = 1;
c.gridx = 6;
frame_send_cmd.add(createset_temperature_range_via_send_cmdPanel(), c);
c.gridy = 2;
c.gridx = 6;
c.weighty = 0;
sendset_temperature_range_via_send_cmd = createSendButton("send_cmd => set_temperature_range");
frame_send_cmd.add(sendset_temperature_range_via_send_cmd, c);
tabbedPane.addTab("send_cmd", frame_send_cmd);


        c.gridy=1;
        c.gridx=0;
        c.gridwidth=1;
        c.fill=GridBagConstraints.BOTH;

        c.weighty=0;
        JPanel cliPanel=new JPanel();
        cliPanel.setLayout(new FlowLayout());
        JLabel cliLabel=new JLabel("Command line: ");
        cli=new JTextField("port!message(param1, param2, param3)");
        cliButton=new JButton("Send");
        cliPanel.add(cliLabel);
        cliPanel.add(cli);
        cliPanel.add(cliButton);
        frame.add(cliPanel,c);
        cliButton.addActionListener(this);

        c.gridx=0;
        c.gridy=2;
        c.weighty=1;
        frame.add(createJTextPane(),c);


        c.gridy=2;
        c.weighty=0;
        clearButton=new JButton("Clear Console");
        frame.add(clearButton,c);

        c.gridy=3;
        c.gridx=0;
        showColor=new JCheckBox("Colored logs");
        showColor.addItemListener(this);
        frame.add(showColor,c);

        commands=new JList<Command>();
        commands.setModel(new DefaultListModel<Command>());
        commands.setVisible(true);
        commands.setLayout(new GridBagLayout());
        c.gridx=1;
        c.gridy=0;
        c.weighty=1;
        c.gridheight=4;
        c.fill=GridBagConstraints.BOTH;
        frame.add(new JScrollPane(commands),c);


        frame.setMinimumSize(new Dimension(480,480));
        frame.pack();
        clearButton.addActionListener(this);
        addListener(this);
        frame.setVisible(true);
        }

public static JLabel createLabel(String name){
        return new JLabel(name);
        }

public static JButton createSendButton(String name){
        return new JButton("send");
        }

public JScrollPane createJTextPane(){
        screen=new JTextPane();
        screen.setFocusable(false);
        screen.setEditable(false);
        screen.setAutoscrolls(true);

        JScrollPane editorScrollPane=new JScrollPane(screen);
        editorScrollPane.setVerticalScrollBarPolicy(
        JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        //editorScrollPane.setPreferredSize(new Dimension(480,240));
        //editorScrollPane.setMinimumSize(new Dimension(320,160));

        doc=screen.getStyledDocument();
        //Style def = StyleContext.getDefaultStyleContext().getStyle(StyleContext.DEFAULT_STYLE);\n"

        Style receivetemperature_via_get_valuesStyle = doc.addStyle("temperature_via_get_values", null);
StyleConstants.setBackground(receivetemperature_via_get_valuesStyle, new Color(188, 206, 139));
Style receiveprompt_via_get_valuesStyle = doc.addStyle("prompt_via_get_values", null);
StyleConstants.setBackground(receiveprompt_via_get_valuesStyle, new Color(241, 206, 220));


        return editorScrollPane;
        }

private String formatForPrint(String text){
        return(text.endsWith("\n")?text:text+"\n");
        }

private void parseAndExecute(String command){
        String[]params=command.split("!");
        if(params.length!=2){
        cliButton.setForeground(alertColor);
        cli.setText("port!message(param1, param2, param3)");
        return;
        }

        if(params[0].equals("send_cmd")) {
if (params[1].startsWith("add_thermometer")) {
params[1] = params[1].substring("add_thermometer".length(), params[1].length());
if (!(params[1].startsWith("(") && params[1].endsWith(")"))) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
params = params[1].substring(1,params[1].length()-1).split(",");
if (!(params.length == 2)) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
try {
Map<String, Object> param = new HashMap<String, Object>();
param.put("id", StringHelper.toObject (short.class, params[0].trim()));
param.put("txt", StringHelper.toObject (String.class, params[1].trim()));
Command c = new Command(port_Human_send_cmd, add_thermometerType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
cliButton.setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message add_thermometer on port send_cmd. Please try again with proper parameters");
cliButton.setForeground(alertColor);
}
}
else if (params[1].startsWith("add_device")) {
params[1] = params[1].substring("add_device".length(), params[1].length());
if (!(params[1].startsWith("(") && params[1].endsWith(")"))) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
params = params[1].substring(1,params[1].length()-1).split(",");
if (!(params.length == 1)) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
try {
Map<String, Object> param = new HashMap<String, Object>();
param.put("did", StringHelper.toObject (short.class, params[0].trim()));
Command c = new Command(port_Human_send_cmd, add_deviceType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
cliButton.setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message add_device on port send_cmd. Please try again with proper parameters");
cliButton.setForeground(alertColor);
}
}
else if (params[1].startsWith("SwitchOn")) {
params[1] = params[1].substring("SwitchOn".length(), params[1].length());
if (!(params[1].startsWith("(") && params[1].endsWith(")"))) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
params = params[1].substring(1,params[1].length()-1).split(",");
if (!(params.length == 1)) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
try {
Map<String, Object> param = new HashMap<String, Object>();
param.put("did", StringHelper.toObject (short.class, params[0].trim()));
Command c = new Command(port_Human_send_cmd, SwitchOnType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
cliButton.setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message SwitchOn on port send_cmd. Please try again with proper parameters");
cliButton.setForeground(alertColor);
}
}
else if (params[1].startsWith("SwitchOff")) {
params[1] = params[1].substring("SwitchOff".length(), params[1].length());
if (!(params[1].startsWith("(") && params[1].endsWith(")"))) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
params = params[1].substring(1,params[1].length()-1).split(",");
if (!(params.length == 1)) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
try {
Map<String, Object> param = new HashMap<String, Object>();
param.put("did", StringHelper.toObject (short.class, params[0].trim()));
Command c = new Command(port_Human_send_cmd, SwitchOffType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
cliButton.setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message SwitchOff on port send_cmd. Please try again with proper parameters");
cliButton.setForeground(alertColor);
}
}
else if (params[1].startsWith("set_temperature")) {
params[1] = params[1].substring("set_temperature".length(), params[1].length());
if (!(params[1].startsWith("(") && params[1].endsWith(")"))) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
params = params[1].substring(1,params[1].length()-1).split(",");
if (!(params.length == 1)) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
try {
Map<String, Object> param = new HashMap<String, Object>();
param.put("t", StringHelper.toObject (float.class, params[0].trim()));
Command c = new Command(port_Human_send_cmd, set_temperatureType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
cliButton.setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message set_temperature on port send_cmd. Please try again with proper parameters");
cliButton.setForeground(alertColor);
}
}
else if (params[1].startsWith("set_polling_interval")) {
params[1] = params[1].substring("set_polling_interval".length(), params[1].length());
if (!(params[1].startsWith("(") && params[1].endsWith(")"))) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
params = params[1].substring(1,params[1].length()-1).split(",");
if (!(params.length == 1)) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
try {
Map<String, Object> param = new HashMap<String, Object>();
param.put("intrvl", StringHelper.toObject (short.class, params[0].trim()));
Command c = new Command(port_Human_send_cmd, set_polling_intervalType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
cliButton.setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message set_polling_interval on port send_cmd. Please try again with proper parameters");
cliButton.setForeground(alertColor);
}
}
else if (params[1].startsWith("set_temperature_range")) {
params[1] = params[1].substring("set_temperature_range".length(), params[1].length());
if (!(params[1].startsWith("(") && params[1].endsWith(")"))) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
params = params[1].substring(1,params[1].length()-1).split(",");
if (!(params.length == 1)) {
cliButton.setForeground(alertColor);
cli.setText("port!message(param1, param2, param3)");
return;
}
try {
Map<String, Object> param = new HashMap<String, Object>();
param.put("range", StringHelper.toObject (float.class, params[0].trim()));
Command c = new Command(port_Human_send_cmd, set_temperature_rangeType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
cliButton.setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message set_temperature_range on port send_cmd. Please try again with proper parameters");
cliButton.setForeground(alertColor);
}
}
}


        else{
        cliButton.setForeground(alertColor);
        cli.setText("port!message(param1, param2, param3)");
        }
        }

@Override
public void actionPerformed(ActionEvent ae){
        if(ae.getSource()==cliButton){
        parseAndExecute(cli.getText());
        }
        else if(ae.getSource()==clearButton){
        screen.setText("");
        }
        else if ( ae.getSource() == getSendadd_thermometer_via_send_cmd()) {
try{
Map<String, Object> param = new HashMap<String, Object>();
param.put("id", StringHelper.toObject (short.class, getFieldadd_thermometer_via_send_cmd_Id().getText()));
param.put("txt", StringHelper.toObject (String.class, getFieldadd_thermometer_via_send_cmd_Txt().getText()));
Command c = new Command(port_Human_send_cmd, add_thermometerType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
for(IHuman_send_cmdClient l : send_cmd_listeners)
l.add_thermometer_from_send_cmd((Short)StringHelper.toObject (short.class, getFieldadd_thermometer_via_send_cmd_Id().getText()), (String)StringHelper.toObject (String.class, getFieldadd_thermometer_via_send_cmd_Txt().getText()));
getSendadd_thermometer_via_send_cmd().setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message add_thermometer on port send_cmd. Please try again with proper parameters");
getSendadd_thermometer_via_send_cmd().setForeground(alertColor);
}
}
else if ( ae.getSource() == getSendadd_device_via_send_cmd()) {
try{
Map<String, Object> param = new HashMap<String, Object>();
param.put("did", StringHelper.toObject (short.class, getFieldadd_device_via_send_cmd_Did().getText()));
Command c = new Command(port_Human_send_cmd, add_deviceType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
for(IHuman_send_cmdClient l : send_cmd_listeners)
l.add_device_from_send_cmd((Short)StringHelper.toObject (short.class, getFieldadd_device_via_send_cmd_Did().getText()));
getSendadd_device_via_send_cmd().setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message add_device on port send_cmd. Please try again with proper parameters");
getSendadd_device_via_send_cmd().setForeground(alertColor);
}
}
else if ( ae.getSource() == getSendSwitchOn_via_send_cmd()) {
try{
Map<String, Object> param = new HashMap<String, Object>();
param.put("did", StringHelper.toObject (short.class, getFieldSwitchOn_via_send_cmd_Did().getText()));
Command c = new Command(port_Human_send_cmd, SwitchOnType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
for(IHuman_send_cmdClient l : send_cmd_listeners)
l.SwitchOn_from_send_cmd((Short)StringHelper.toObject (short.class, getFieldSwitchOn_via_send_cmd_Did().getText()));
getSendSwitchOn_via_send_cmd().setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message SwitchOn on port send_cmd. Please try again with proper parameters");
getSendSwitchOn_via_send_cmd().setForeground(alertColor);
}
}
else if ( ae.getSource() == getSendSwitchOff_via_send_cmd()) {
try{
Map<String, Object> param = new HashMap<String, Object>();
param.put("did", StringHelper.toObject (short.class, getFieldSwitchOff_via_send_cmd_Did().getText()));
Command c = new Command(port_Human_send_cmd, SwitchOffType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
for(IHuman_send_cmdClient l : send_cmd_listeners)
l.SwitchOff_from_send_cmd((Short)StringHelper.toObject (short.class, getFieldSwitchOff_via_send_cmd_Did().getText()));
getSendSwitchOff_via_send_cmd().setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message SwitchOff on port send_cmd. Please try again with proper parameters");
getSendSwitchOff_via_send_cmd().setForeground(alertColor);
}
}
else if ( ae.getSource() == getSendset_temperature_via_send_cmd()) {
try{
Map<String, Object> param = new HashMap<String, Object>();
param.put("t", StringHelper.toObject (float.class, getFieldset_temperature_via_send_cmd_T().getText()));
Command c = new Command(port_Human_send_cmd, set_temperatureType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
for(IHuman_send_cmdClient l : send_cmd_listeners)
l.set_temperature_from_send_cmd((Float)StringHelper.toObject (float.class, getFieldset_temperature_via_send_cmd_T().getText()));
getSendset_temperature_via_send_cmd().setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message set_temperature on port send_cmd. Please try again with proper parameters");
getSendset_temperature_via_send_cmd().setForeground(alertColor);
}
}
else if ( ae.getSource() == getSendset_polling_interval_via_send_cmd()) {
try{
Map<String, Object> param = new HashMap<String, Object>();
param.put("intrvl", StringHelper.toObject (short.class, getFieldset_polling_interval_via_send_cmd_Intrvl().getText()));
Command c = new Command(port_Human_send_cmd, set_polling_intervalType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
for(IHuman_send_cmdClient l : send_cmd_listeners)
l.set_polling_interval_from_send_cmd((Short)StringHelper.toObject (short.class, getFieldset_polling_interval_via_send_cmd_Intrvl().getText()));
getSendset_polling_interval_via_send_cmd().setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message set_polling_interval on port send_cmd. Please try again with proper parameters");
getSendset_polling_interval_via_send_cmd().setForeground(alertColor);
}
}
else if ( ae.getSource() == getSendset_temperature_range_via_send_cmd()) {
try{
Map<String, Object> param = new HashMap<String, Object>();
param.put("range", StringHelper.toObject (float.class, getFieldset_temperature_range_via_send_cmd_Range().getText()));
Command c = new Command(port_Human_send_cmd, set_temperature_rangeType, param);c.execute();
((DefaultListModel)commands.getModel()).addElement(c);
for(IHuman_send_cmdClient l : send_cmd_listeners)
l.set_temperature_range_from_send_cmd((Float)StringHelper.toObject (float.class, getFieldset_temperature_range_via_send_cmd_Range().getText()));
getSendset_temperature_range_via_send_cmd().setForeground(Color.BLACK);
} catch(IllegalArgumentException iae) {
System.err.println("Cannot parse arguments for message set_temperature_range on port send_cmd. Please try again with proper parameters");
getSendset_temperature_range_via_send_cmd().setForeground(alertColor);
}
}

        }

@Override
public void itemStateChanged(ItemEvent e){
        Object source=e.getItemSelectable();
        if(source==showColor){
        setColorOutput(!isColorOutput());
        }
        }
@Override
public synchronized void temperature_via_get_values(short TemperatureMsg_temperature_id_var, String TemperatureMsg_temperature_txt_var, float TemperatureMsg_temperature_t_var){
print("temperature_via_get_values", "TODO");
}
@Override
public synchronized void prompt_via_get_values(String GeneralMsg_prompt_txt_var){
print("prompt_via_get_values", "TODO");
}
}
